// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package client

import (
	"bytes"
	"context"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"

	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for UpdateAgentToolJSONBodyToolResultTreatment.
const (
	UpdateAgentToolJSONBodyToolResultTreatmentSanitizeWithDualLlm UpdateAgentToolJSONBodyToolResultTreatment = "sanitize_with_dual_llm"
	UpdateAgentToolJSONBodyToolResultTreatmentTrusted             UpdateAgentToolJSONBodyToolResultTreatment = "trusted"
	UpdateAgentToolJSONBodyToolResultTreatmentUntrusted           UpdateAgentToolJSONBodyToolResultTreatment = "untrusted"
)

// Defines values for CreateToolInvocationPolicyJSONBodyAction.
const (
	CreateToolInvocationPolicyJSONBodyActionAllowWhenContextIsUntrusted CreateToolInvocationPolicyJSONBodyAction = "allow_when_context_is_untrusted"
	CreateToolInvocationPolicyJSONBodyActionBlockAlways                 CreateToolInvocationPolicyJSONBodyAction = "block_always"
)

// Defines values for CreateToolInvocationPolicyJSONBodyOperator.
const (
	CreateToolInvocationPolicyJSONBodyOperatorContains    CreateToolInvocationPolicyJSONBodyOperator = "contains"
	CreateToolInvocationPolicyJSONBodyOperatorEndsWith    CreateToolInvocationPolicyJSONBodyOperator = "endsWith"
	CreateToolInvocationPolicyJSONBodyOperatorEqual       CreateToolInvocationPolicyJSONBodyOperator = "equal"
	CreateToolInvocationPolicyJSONBodyOperatorNotContains CreateToolInvocationPolicyJSONBodyOperator = "notContains"
	CreateToolInvocationPolicyJSONBodyOperatorNotEqual    CreateToolInvocationPolicyJSONBodyOperator = "notEqual"
	CreateToolInvocationPolicyJSONBodyOperatorRegex       CreateToolInvocationPolicyJSONBodyOperator = "regex"
	CreateToolInvocationPolicyJSONBodyOperatorStartsWith  CreateToolInvocationPolicyJSONBodyOperator = "startsWith"
)

// Defines values for UpdateToolInvocationPolicyJSONBodyAction.
const (
	UpdateToolInvocationPolicyJSONBodyActionAllowWhenContextIsUntrusted UpdateToolInvocationPolicyJSONBodyAction = "allow_when_context_is_untrusted"
	UpdateToolInvocationPolicyJSONBodyActionBlockAlways                 UpdateToolInvocationPolicyJSONBodyAction = "block_always"
)

// Defines values for UpdateToolInvocationPolicyJSONBodyOperator.
const (
	UpdateToolInvocationPolicyJSONBodyOperatorContains    UpdateToolInvocationPolicyJSONBodyOperator = "contains"
	UpdateToolInvocationPolicyJSONBodyOperatorEndsWith    UpdateToolInvocationPolicyJSONBodyOperator = "endsWith"
	UpdateToolInvocationPolicyJSONBodyOperatorEqual       UpdateToolInvocationPolicyJSONBodyOperator = "equal"
	UpdateToolInvocationPolicyJSONBodyOperatorNotContains UpdateToolInvocationPolicyJSONBodyOperator = "notContains"
	UpdateToolInvocationPolicyJSONBodyOperatorNotEqual    UpdateToolInvocationPolicyJSONBodyOperator = "notEqual"
	UpdateToolInvocationPolicyJSONBodyOperatorRegex       UpdateToolInvocationPolicyJSONBodyOperator = "regex"
	UpdateToolInvocationPolicyJSONBodyOperatorStartsWith  UpdateToolInvocationPolicyJSONBodyOperator = "startsWith"
)

// Defines values for CreateInternalMcpCatalogItemJSONBodyAuthFields03.
const (
	CreateInternalMcpCatalogItemJSONBodyAuthFields03LessThannil CreateInternalMcpCatalogItemJSONBodyAuthFields03 = "<nil>"
)

// Defines values for UpdateInternalMcpCatalogItemJSONBodyAuthFields03.
const (
	UpdateInternalMcpCatalogItemJSONBodyAuthFields03LessThannil UpdateInternalMcpCatalogItemJSONBodyAuthFields03 = "<nil>"
)

// Defines values for InstallMcpServerJSONBodyMetadata03.
const (
	LessThannil InstallMcpServerJSONBodyMetadata03 = "<nil>"
)

// Defines values for CreateTrustedDataPolicyJSONBodyAction.
const (
	CreateTrustedDataPolicyJSONBodyActionBlockAlways         CreateTrustedDataPolicyJSONBodyAction = "block_always"
	CreateTrustedDataPolicyJSONBodyActionMarkAsTrusted       CreateTrustedDataPolicyJSONBodyAction = "mark_as_trusted"
	CreateTrustedDataPolicyJSONBodyActionSanitizeWithDualLlm CreateTrustedDataPolicyJSONBodyAction = "sanitize_with_dual_llm"
)

// Defines values for CreateTrustedDataPolicyJSONBodyOperator.
const (
	CreateTrustedDataPolicyJSONBodyOperatorContains    CreateTrustedDataPolicyJSONBodyOperator = "contains"
	CreateTrustedDataPolicyJSONBodyOperatorEndsWith    CreateTrustedDataPolicyJSONBodyOperator = "endsWith"
	CreateTrustedDataPolicyJSONBodyOperatorEqual       CreateTrustedDataPolicyJSONBodyOperator = "equal"
	CreateTrustedDataPolicyJSONBodyOperatorNotContains CreateTrustedDataPolicyJSONBodyOperator = "notContains"
	CreateTrustedDataPolicyJSONBodyOperatorNotEqual    CreateTrustedDataPolicyJSONBodyOperator = "notEqual"
	CreateTrustedDataPolicyJSONBodyOperatorRegex       CreateTrustedDataPolicyJSONBodyOperator = "regex"
	CreateTrustedDataPolicyJSONBodyOperatorStartsWith  CreateTrustedDataPolicyJSONBodyOperator = "startsWith"
)

// Defines values for UpdateTrustedDataPolicyJSONBodyAction.
const (
	BlockAlways         UpdateTrustedDataPolicyJSONBodyAction = "block_always"
	MarkAsTrusted       UpdateTrustedDataPolicyJSONBodyAction = "mark_as_trusted"
	SanitizeWithDualLlm UpdateTrustedDataPolicyJSONBodyAction = "sanitize_with_dual_llm"
)

// Defines values for UpdateTrustedDataPolicyJSONBodyOperator.
const (
	UpdateTrustedDataPolicyJSONBodyOperatorContains    UpdateTrustedDataPolicyJSONBodyOperator = "contains"
	UpdateTrustedDataPolicyJSONBodyOperatorEndsWith    UpdateTrustedDataPolicyJSONBodyOperator = "endsWith"
	UpdateTrustedDataPolicyJSONBodyOperatorEqual       UpdateTrustedDataPolicyJSONBodyOperator = "equal"
	UpdateTrustedDataPolicyJSONBodyOperatorNotContains UpdateTrustedDataPolicyJSONBodyOperator = "notContains"
	UpdateTrustedDataPolicyJSONBodyOperatorNotEqual    UpdateTrustedDataPolicyJSONBodyOperator = "notEqual"
	UpdateTrustedDataPolicyJSONBodyOperatorRegex       UpdateTrustedDataPolicyJSONBodyOperator = "regex"
	UpdateTrustedDataPolicyJSONBodyOperatorStartsWith  UpdateTrustedDataPolicyJSONBodyOperator = "startsWith"
)

// UpdateAgentToolJSONBody defines parameters for UpdateAgentTool.
type UpdateAgentToolJSONBody struct {
	AllowUsageWhenUntrustedDataIsPresent *bool                                       `json:"allowUsageWhenUntrustedDataIsPresent,omitempty"`
	ResponseModifierTemplate             *string                                     `json:"responseModifierTemplate"`
	ToolResultTreatment                  *UpdateAgentToolJSONBodyToolResultTreatment `json:"toolResultTreatment,omitempty"`
}

// UpdateAgentToolJSONBodyToolResultTreatment defines parameters for UpdateAgentTool.
type UpdateAgentToolJSONBodyToolResultTreatment string

// CreateAgentJSONBody defines parameters for CreateAgent.
type CreateAgentJSONBody struct {
	IsDefault *bool    `json:"isDefault,omitempty"`
	IsDemo    *bool    `json:"isDemo,omitempty"`
	Name      string   `json:"name"`
	Teams     []string `json:"teams"`
}

// UpdateAgentJSONBody defines parameters for UpdateAgent.
type UpdateAgentJSONBody struct {
	IsDefault *bool     `json:"isDefault,omitempty"`
	IsDemo    *bool     `json:"isDemo,omitempty"`
	Name      *string   `json:"name,omitempty"`
	Teams     *[]string `json:"teams,omitempty"`
}

// CreateToolInvocationPolicyJSONBody defines parameters for CreateToolInvocationPolicy.
type CreateToolInvocationPolicyJSONBody struct {
	Action       CreateToolInvocationPolicyJSONBodyAction   `json:"action"`
	AgentToolId  openapi_types.UUID                         `json:"agentToolId"`
	ArgumentName string                                     `json:"argumentName"`
	Operator     CreateToolInvocationPolicyJSONBodyOperator `json:"operator"`
	Reason       *string                                    `json:"reason"`
	Value        string                                     `json:"value"`
}

// CreateToolInvocationPolicyJSONBodyAction defines parameters for CreateToolInvocationPolicy.
type CreateToolInvocationPolicyJSONBodyAction string

// CreateToolInvocationPolicyJSONBodyOperator defines parameters for CreateToolInvocationPolicy.
type CreateToolInvocationPolicyJSONBodyOperator string

// UpdateToolInvocationPolicyJSONBody defines parameters for UpdateToolInvocationPolicy.
type UpdateToolInvocationPolicyJSONBody struct {
	Action       *UpdateToolInvocationPolicyJSONBodyAction   `json:"action,omitempty"`
	AgentToolId  *openapi_types.UUID                         `json:"agentToolId,omitempty"`
	ArgumentName *string                                     `json:"argumentName,omitempty"`
	Operator     *UpdateToolInvocationPolicyJSONBodyOperator `json:"operator,omitempty"`
	Reason       *string                                     `json:"reason"`
	Value        *string                                     `json:"value,omitempty"`
}

// UpdateToolInvocationPolicyJSONBodyAction defines parameters for UpdateToolInvocationPolicy.
type UpdateToolInvocationPolicyJSONBodyAction string

// UpdateToolInvocationPolicyJSONBodyOperator defines parameters for UpdateToolInvocationPolicy.
type UpdateToolInvocationPolicyJSONBodyOperator string

// CreateDualLlmConfigJSONBody defines parameters for CreateDualLlmConfig.
type CreateDualLlmConfigJSONBody struct {
	Enabled                *bool  `json:"enabled,omitempty"`
	MainAgentPrompt        string `json:"mainAgentPrompt"`
	MaxRounds              *int   `json:"maxRounds,omitempty"`
	QuarantinedAgentPrompt string `json:"quarantinedAgentPrompt"`
	SummaryPrompt          string `json:"summaryPrompt"`
}

// UpdateDualLlmConfigJSONBody defines parameters for UpdateDualLlmConfig.
type UpdateDualLlmConfigJSONBody struct {
	Enabled                *bool   `json:"enabled,omitempty"`
	MainAgentPrompt        *string `json:"mainAgentPrompt,omitempty"`
	MaxRounds              *int    `json:"maxRounds,omitempty"`
	QuarantinedAgentPrompt *string `json:"quarantinedAgentPrompt,omitempty"`
	SummaryPrompt          *string `json:"summaryPrompt,omitempty"`
}

// CreateInternalMcpCatalogItemJSONBody defines parameters for CreateInternalMcpCatalogItem.
type CreateInternalMcpCatalogItemJSONBody struct {
	AuthDescription     *string                                          `json:"authDescription"`
	AuthFields          *CreateInternalMcpCatalogItemJSONBody_AuthFields `json:"authFields"`
	Description         *string                                          `json:"description"`
	InstallationCommand *string                                          `json:"installationCommand"`
	Name                string                                           `json:"name"`
	Repository          *string                                          `json:"repository"`
	RequiresAuth        *bool                                            `json:"requiresAuth,omitempty"`
	Version             *string                                          `json:"version"`
}

// CreateInternalMcpCatalogItemJSONBodyAuthFields0 defines parameters for CreateInternalMcpCatalogItem.
type CreateInternalMcpCatalogItemJSONBodyAuthFields0 struct {
	union json.RawMessage
}

// CreateInternalMcpCatalogItemJSONBodyAuthFields00 defines parameters for CreateInternalMcpCatalogItem.
type CreateInternalMcpCatalogItemJSONBodyAuthFields00 = string

// CreateInternalMcpCatalogItemJSONBodyAuthFields01 defines parameters for CreateInternalMcpCatalogItem.
type CreateInternalMcpCatalogItemJSONBodyAuthFields01 = float32

// CreateInternalMcpCatalogItemJSONBodyAuthFields02 defines parameters for CreateInternalMcpCatalogItem.
type CreateInternalMcpCatalogItemJSONBodyAuthFields02 = bool

// CreateInternalMcpCatalogItemJSONBodyAuthFields03 defines parameters for CreateInternalMcpCatalogItem.
type CreateInternalMcpCatalogItemJSONBodyAuthFields03 string

// CreateInternalMcpCatalogItemJSONBodyAuthFields1 defines parameters for CreateInternalMcpCatalogItem.
type CreateInternalMcpCatalogItemJSONBodyAuthFields1 map[string]interface{}

// CreateInternalMcpCatalogItemJSONBodyAuthFields2 defines parameters for CreateInternalMcpCatalogItem.
type CreateInternalMcpCatalogItemJSONBodyAuthFields2 = []interface{}

// CreateInternalMcpCatalogItemJSONBody_AuthFields defines parameters for CreateInternalMcpCatalogItem.
type CreateInternalMcpCatalogItemJSONBody_AuthFields struct {
	union json.RawMessage
}

// UpdateInternalMcpCatalogItemJSONBody defines parameters for UpdateInternalMcpCatalogItem.
type UpdateInternalMcpCatalogItemJSONBody struct {
	AuthDescription     *string                                          `json:"authDescription"`
	AuthFields          *UpdateInternalMcpCatalogItemJSONBody_AuthFields `json:"authFields"`
	Description         *string                                          `json:"description"`
	InstallationCommand *string                                          `json:"installationCommand"`
	Name                *string                                          `json:"name,omitempty"`
	Repository          *string                                          `json:"repository"`
	RequiresAuth        *bool                                            `json:"requiresAuth,omitempty"`
	Version             *string                                          `json:"version"`
}

// UpdateInternalMcpCatalogItemJSONBodyAuthFields0 defines parameters for UpdateInternalMcpCatalogItem.
type UpdateInternalMcpCatalogItemJSONBodyAuthFields0 struct {
	union json.RawMessage
}

// UpdateInternalMcpCatalogItemJSONBodyAuthFields00 defines parameters for UpdateInternalMcpCatalogItem.
type UpdateInternalMcpCatalogItemJSONBodyAuthFields00 = string

// UpdateInternalMcpCatalogItemJSONBodyAuthFields01 defines parameters for UpdateInternalMcpCatalogItem.
type UpdateInternalMcpCatalogItemJSONBodyAuthFields01 = float32

// UpdateInternalMcpCatalogItemJSONBodyAuthFields02 defines parameters for UpdateInternalMcpCatalogItem.
type UpdateInternalMcpCatalogItemJSONBodyAuthFields02 = bool

// UpdateInternalMcpCatalogItemJSONBodyAuthFields03 defines parameters for UpdateInternalMcpCatalogItem.
type UpdateInternalMcpCatalogItemJSONBodyAuthFields03 string

// UpdateInternalMcpCatalogItemJSONBodyAuthFields1 defines parameters for UpdateInternalMcpCatalogItem.
type UpdateInternalMcpCatalogItemJSONBodyAuthFields1 map[string]interface{}

// UpdateInternalMcpCatalogItemJSONBodyAuthFields2 defines parameters for UpdateInternalMcpCatalogItem.
type UpdateInternalMcpCatalogItemJSONBodyAuthFields2 = []interface{}

// UpdateInternalMcpCatalogItemJSONBody_AuthFields defines parameters for UpdateInternalMcpCatalogItem.
type UpdateInternalMcpCatalogItemJSONBody_AuthFields struct {
	union json.RawMessage
}

// InstallMcpServerJSONBody defines parameters for InstallMcpServer.
type InstallMcpServerJSONBody struct {
	AgentIds  *[]openapi_types.UUID              `json:"agentIds,omitempty"`
	CatalogId *openapi_types.UUID                `json:"catalogId"`
	Metadata  *InstallMcpServerJSONBody_Metadata `json:"metadata,omitempty"`
	Name      string                             `json:"name"`
	Teams     *[]string                          `json:"teams,omitempty"`
}

// InstallMcpServerJSONBodyMetadata0 defines parameters for InstallMcpServer.
type InstallMcpServerJSONBodyMetadata0 struct {
	union json.RawMessage
}

// InstallMcpServerJSONBodyMetadata00 defines parameters for InstallMcpServer.
type InstallMcpServerJSONBodyMetadata00 = string

// InstallMcpServerJSONBodyMetadata01 defines parameters for InstallMcpServer.
type InstallMcpServerJSONBodyMetadata01 = float32

// InstallMcpServerJSONBodyMetadata02 defines parameters for InstallMcpServer.
type InstallMcpServerJSONBodyMetadata02 = bool

// InstallMcpServerJSONBodyMetadata03 defines parameters for InstallMcpServer.
type InstallMcpServerJSONBodyMetadata03 string

// InstallMcpServerJSONBodyMetadata1 defines parameters for InstallMcpServer.
type InstallMcpServerJSONBodyMetadata1 map[string]interface{}

// InstallMcpServerJSONBodyMetadata2 defines parameters for InstallMcpServer.
type InstallMcpServerJSONBodyMetadata2 = []interface{}

// InstallMcpServerJSONBody_Metadata defines parameters for InstallMcpServer.
type InstallMcpServerJSONBody_Metadata struct {
	union json.RawMessage
}

// CreateTeamJSONBody defines parameters for CreateTeam.
type CreateTeamJSONBody struct {
	Description *string `json:"description,omitempty"`
	Name        string  `json:"name"`
}

// UpdateTeamJSONBody defines parameters for UpdateTeam.
type UpdateTeamJSONBody struct {
	Description *string `json:"description,omitempty"`
	Name        *string `json:"name,omitempty"`
}

// AddTeamMemberJSONBody defines parameters for AddTeamMember.
type AddTeamMemberJSONBody struct {
	Role   *string `json:"role,omitempty"`
	UserId string  `json:"userId"`
}

// CreateTrustedDataPolicyJSONBody defines parameters for CreateTrustedDataPolicy.
type CreateTrustedDataPolicyJSONBody struct {
	Action        CreateTrustedDataPolicyJSONBodyAction   `json:"action"`
	AgentToolId   openapi_types.UUID                      `json:"agentToolId"`
	AttributePath string                                  `json:"attributePath"`
	Description   string                                  `json:"description"`
	Operator      CreateTrustedDataPolicyJSONBodyOperator `json:"operator"`
	Value         string                                  `json:"value"`
}

// CreateTrustedDataPolicyJSONBodyAction defines parameters for CreateTrustedDataPolicy.
type CreateTrustedDataPolicyJSONBodyAction string

// CreateTrustedDataPolicyJSONBodyOperator defines parameters for CreateTrustedDataPolicy.
type CreateTrustedDataPolicyJSONBodyOperator string

// UpdateTrustedDataPolicyJSONBody defines parameters for UpdateTrustedDataPolicy.
type UpdateTrustedDataPolicyJSONBody struct {
	Action        *UpdateTrustedDataPolicyJSONBodyAction   `json:"action,omitempty"`
	AgentToolId   *openapi_types.UUID                      `json:"agentToolId,omitempty"`
	AttributePath *string                                  `json:"attributePath,omitempty"`
	Description   *string                                  `json:"description,omitempty"`
	Operator      *UpdateTrustedDataPolicyJSONBodyOperator `json:"operator,omitempty"`
	Value         *string                                  `json:"value,omitempty"`
}

// UpdateTrustedDataPolicyJSONBodyAction defines parameters for UpdateTrustedDataPolicy.
type UpdateTrustedDataPolicyJSONBodyAction string

// UpdateTrustedDataPolicyJSONBodyOperator defines parameters for UpdateTrustedDataPolicy.
type UpdateTrustedDataPolicyJSONBodyOperator string

// UpdateAgentToolJSONRequestBody defines body for UpdateAgentTool for application/json ContentType.
type UpdateAgentToolJSONRequestBody UpdateAgentToolJSONBody

// CreateAgentJSONRequestBody defines body for CreateAgent for application/json ContentType.
type CreateAgentJSONRequestBody CreateAgentJSONBody

// UpdateAgentJSONRequestBody defines body for UpdateAgent for application/json ContentType.
type UpdateAgentJSONRequestBody UpdateAgentJSONBody

// CreateToolInvocationPolicyJSONRequestBody defines body for CreateToolInvocationPolicy for application/json ContentType.
type CreateToolInvocationPolicyJSONRequestBody CreateToolInvocationPolicyJSONBody

// UpdateToolInvocationPolicyJSONRequestBody defines body for UpdateToolInvocationPolicy for application/json ContentType.
type UpdateToolInvocationPolicyJSONRequestBody UpdateToolInvocationPolicyJSONBody

// CreateDualLlmConfigJSONRequestBody defines body for CreateDualLlmConfig for application/json ContentType.
type CreateDualLlmConfigJSONRequestBody CreateDualLlmConfigJSONBody

// UpdateDualLlmConfigJSONRequestBody defines body for UpdateDualLlmConfig for application/json ContentType.
type UpdateDualLlmConfigJSONRequestBody UpdateDualLlmConfigJSONBody

// CreateInternalMcpCatalogItemJSONRequestBody defines body for CreateInternalMcpCatalogItem for application/json ContentType.
type CreateInternalMcpCatalogItemJSONRequestBody CreateInternalMcpCatalogItemJSONBody

// UpdateInternalMcpCatalogItemJSONRequestBody defines body for UpdateInternalMcpCatalogItem for application/json ContentType.
type UpdateInternalMcpCatalogItemJSONRequestBody UpdateInternalMcpCatalogItemJSONBody

// InstallMcpServerJSONRequestBody defines body for InstallMcpServer for application/json ContentType.
type InstallMcpServerJSONRequestBody InstallMcpServerJSONBody

// CreateTeamJSONRequestBody defines body for CreateTeam for application/json ContentType.
type CreateTeamJSONRequestBody CreateTeamJSONBody

// UpdateTeamJSONRequestBody defines body for UpdateTeam for application/json ContentType.
type UpdateTeamJSONRequestBody UpdateTeamJSONBody

// AddTeamMemberJSONRequestBody defines body for AddTeamMember for application/json ContentType.
type AddTeamMemberJSONRequestBody AddTeamMemberJSONBody

// CreateTrustedDataPolicyJSONRequestBody defines body for CreateTrustedDataPolicy for application/json ContentType.
type CreateTrustedDataPolicyJSONRequestBody CreateTrustedDataPolicyJSONBody

// UpdateTrustedDataPolicyJSONRequestBody defines body for UpdateTrustedDataPolicy for application/json ContentType.
type UpdateTrustedDataPolicyJSONRequestBody UpdateTrustedDataPolicyJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAllAgentTools request
	GetAllAgentTools(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAgentToolWithBody request with any body
	UpdateAgentToolWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAgentTool(ctx context.Context, id openapi_types.UUID, body UpdateAgentToolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAgents request
	GetAgents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAgentWithBody request with any body
	CreateAgentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAgent(ctx context.Context, body CreateAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDefaultAgent request
	GetDefaultAgent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAgentTools request
	GetAgentTools(ctx context.Context, agentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UnassignToolFromAgent request
	UnassignToolFromAgent(ctx context.Context, agentId openapi_types.UUID, toolId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AssignToolToAgent request
	AssignToolToAgent(ctx context.Context, agentId openapi_types.UUID, toolId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteAgent request
	DeleteAgent(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAgent request
	GetAgent(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateAgentWithBody request with any body
	UpdateAgentWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateAgent(ctx context.Context, id openapi_types.UUID, body UpdateAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetOperators request
	GetOperators(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetToolInvocationPolicies request
	GetToolInvocationPolicies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateToolInvocationPolicyWithBody request with any body
	CreateToolInvocationPolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateToolInvocationPolicy(ctx context.Context, body CreateToolInvocationPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteToolInvocationPolicy request
	DeleteToolInvocationPolicy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetToolInvocationPolicy request
	GetToolInvocationPolicy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateToolInvocationPolicyWithBody request with any body
	UpdateToolInvocationPolicyWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateToolInvocationPolicy(ctx context.Context, id openapi_types.UUID, body UpdateToolInvocationPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDualLlmConfigs request
	GetDualLlmConfigs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateDualLlmConfigWithBody request with any body
	CreateDualLlmConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateDualLlmConfig(ctx context.Context, body CreateDualLlmConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDefaultDualLlmConfig request
	GetDefaultDualLlmConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteDualLlmConfig request
	DeleteDualLlmConfig(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDualLlmConfig request
	GetDualLlmConfig(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateDualLlmConfigWithBody request with any body
	UpdateDualLlmConfigWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateDualLlmConfig(ctx context.Context, id openapi_types.UUID, body UpdateDualLlmConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDualLlmResultsByInteraction request
	GetDualLlmResultsByInteraction(ctx context.Context, interactionId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetDualLlmResultByToolCallId request
	GetDualLlmResultByToolCallId(ctx context.Context, toolCallId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetFeatures request
	GetFeatures(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInternalMcpCatalog request
	GetInternalMcpCatalog(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateInternalMcpCatalogItemWithBody request with any body
	CreateInternalMcpCatalogItemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateInternalMcpCatalogItem(ctx context.Context, body CreateInternalMcpCatalogItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteInternalMcpCatalogItem request
	DeleteInternalMcpCatalogItem(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetInternalMcpCatalogItem request
	GetInternalMcpCatalogItem(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateInternalMcpCatalogItemWithBody request with any body
	UpdateInternalMcpCatalogItemWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateInternalMcpCatalogItem(ctx context.Context, id openapi_types.UUID, body UpdateInternalMcpCatalogItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMcpServers request
	GetMcpServers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// InstallMcpServerWithBody request with any body
	InstallMcpServerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	InstallMcpServer(ctx context.Context, body InstallMcpServerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMcpServer request
	DeleteMcpServer(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMcpServer request
	GetMcpServer(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeams request
	GetTeams(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTeamWithBody request with any body
	CreateTeamWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTeam(ctx context.Context, body CreateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTeam request
	DeleteTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeam request
	GetTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTeamWithBody request with any body
	UpdateTeamWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTeam(ctx context.Context, id string, body UpdateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTeamMembers request
	GetTeamMembers(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AddTeamMemberWithBody request with any body
	AddTeamMemberWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AddTeamMember(ctx context.Context, id string, body AddTeamMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// RemoveTeamMember request
	RemoveTeamMember(ctx context.Context, id string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTools request
	GetTools(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUnassignedTools request
	GetUnassignedTools(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTrustedDataPolicies request
	GetTrustedDataPolicies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateTrustedDataPolicyWithBody request with any body
	CreateTrustedDataPolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateTrustedDataPolicy(ctx context.Context, body CreateTrustedDataPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTrustedDataPolicy request
	DeleteTrustedDataPolicy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTrustedDataPolicy request
	GetTrustedDataPolicy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error)

	// UpdateTrustedDataPolicyWithBody request with any body
	UpdateTrustedDataPolicyWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	UpdateTrustedDataPolicy(ctx context.Context, id openapi_types.UUID, body UpdateTrustedDataPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetHealth request
	GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAllAgentTools(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllAgentToolsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAgentToolWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAgentToolRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAgentTool(ctx context.Context, id openapi_types.UUID, body UpdateAgentToolJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAgentToolRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAgents(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAgentsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAgentWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAgentRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAgent(ctx context.Context, body CreateAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAgentRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDefaultAgent(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDefaultAgentRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAgentTools(ctx context.Context, agentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAgentToolsRequest(c.Server, agentId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UnassignToolFromAgent(ctx context.Context, agentId openapi_types.UUID, toolId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUnassignToolFromAgentRequest(c.Server, agentId, toolId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AssignToolToAgent(ctx context.Context, agentId openapi_types.UUID, toolId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAssignToolToAgentRequest(c.Server, agentId, toolId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteAgent(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteAgentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAgent(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAgentRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAgentWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAgentRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateAgent(ctx context.Context, id openapi_types.UUID, body UpdateAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateAgentRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetOperators(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetOperatorsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetToolInvocationPolicies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetToolInvocationPoliciesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateToolInvocationPolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateToolInvocationPolicyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateToolInvocationPolicy(ctx context.Context, body CreateToolInvocationPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateToolInvocationPolicyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteToolInvocationPolicy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteToolInvocationPolicyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetToolInvocationPolicy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetToolInvocationPolicyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateToolInvocationPolicyWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateToolInvocationPolicyRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateToolInvocationPolicy(ctx context.Context, id openapi_types.UUID, body UpdateToolInvocationPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateToolInvocationPolicyRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDualLlmConfigs(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDualLlmConfigsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDualLlmConfigWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDualLlmConfigRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateDualLlmConfig(ctx context.Context, body CreateDualLlmConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateDualLlmConfigRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDefaultDualLlmConfig(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDefaultDualLlmConfigRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteDualLlmConfig(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteDualLlmConfigRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDualLlmConfig(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDualLlmConfigRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDualLlmConfigWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDualLlmConfigRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateDualLlmConfig(ctx context.Context, id openapi_types.UUID, body UpdateDualLlmConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateDualLlmConfigRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDualLlmResultsByInteraction(ctx context.Context, interactionId openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDualLlmResultsByInteractionRequest(c.Server, interactionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetDualLlmResultByToolCallId(ctx context.Context, toolCallId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetDualLlmResultByToolCallIdRequest(c.Server, toolCallId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetFeatures(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetFeaturesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInternalMcpCatalog(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInternalMcpCatalogRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateInternalMcpCatalogItemWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateInternalMcpCatalogItemRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateInternalMcpCatalogItem(ctx context.Context, body CreateInternalMcpCatalogItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateInternalMcpCatalogItemRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteInternalMcpCatalogItem(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteInternalMcpCatalogItemRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetInternalMcpCatalogItem(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetInternalMcpCatalogItemRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateInternalMcpCatalogItemWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateInternalMcpCatalogItemRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateInternalMcpCatalogItem(ctx context.Context, id openapi_types.UUID, body UpdateInternalMcpCatalogItemJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateInternalMcpCatalogItemRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMcpServers(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMcpServersRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstallMcpServerWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstallMcpServerRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) InstallMcpServer(ctx context.Context, body InstallMcpServerJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewInstallMcpServerRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMcpServer(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMcpServerRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMcpServer(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMcpServerRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeams(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTeamWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTeam(ctx context.Context, body CreateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTeamRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTeamRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeam(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTeamWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTeamRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTeam(ctx context.Context, id string, body UpdateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTeamRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTeamMembers(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTeamMembersRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddTeamMemberWithBody(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddTeamMemberRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AddTeamMember(ctx context.Context, id string, body AddTeamMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAddTeamMemberRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) RemoveTeamMember(ctx context.Context, id string, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewRemoveTeamMemberRequest(c.Server, id, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTools(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetToolsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUnassignedTools(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUnassignedToolsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTrustedDataPolicies(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTrustedDataPoliciesRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTrustedDataPolicyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTrustedDataPolicyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateTrustedDataPolicy(ctx context.Context, body CreateTrustedDataPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateTrustedDataPolicyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTrustedDataPolicy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTrustedDataPolicyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTrustedDataPolicy(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTrustedDataPolicyRequest(c.Server, id)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTrustedDataPolicyWithBody(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTrustedDataPolicyRequestWithBody(c.Server, id, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) UpdateTrustedDataPolicy(ctx context.Context, id openapi_types.UUID, body UpdateTrustedDataPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewUpdateTrustedDataPolicyRequest(c.Server, id, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetHealth(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetHealthRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAllAgentToolsRequest generates requests for GetAllAgentTools
func NewGetAllAgentToolsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/agent-tools")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAgentToolRequest calls the generic UpdateAgentTool builder with application/json body
func NewUpdateAgentToolRequest(server string, id openapi_types.UUID, body UpdateAgentToolJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAgentToolRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateAgentToolRequestWithBody generates requests for UpdateAgentTool with any type of body
func NewUpdateAgentToolRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/agent-tools/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PATCH", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAgentsRequest generates requests for GetAgents
func NewGetAgentsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/agents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAgentRequest calls the generic CreateAgent builder with application/json body
func NewCreateAgentRequest(server string, body CreateAgentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAgentRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAgentRequestWithBody generates requests for CreateAgent with any type of body
func NewCreateAgentRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/agents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDefaultAgentRequest generates requests for GetDefaultAgent
func NewGetDefaultAgentRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/agents/default")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAgentToolsRequest generates requests for GetAgentTools
func NewGetAgentToolsRequest(server string, agentId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agentId", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/agents/%s/tools", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUnassignToolFromAgentRequest generates requests for UnassignToolFromAgent
func NewUnassignToolFromAgentRequest(server string, agentId openapi_types.UUID, toolId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agentId", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "toolId", runtime.ParamLocationPath, toolId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/agents/%s/tools/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAssignToolToAgentRequest generates requests for AssignToolToAgent
func NewAssignToolToAgentRequest(server string, agentId openapi_types.UUID, toolId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "agentId", runtime.ParamLocationPath, agentId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "toolId", runtime.ParamLocationPath, toolId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/agents/%s/tools/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteAgentRequest generates requests for DeleteAgent
func NewDeleteAgentRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/agents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAgentRequest generates requests for GetAgent
func NewGetAgentRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/agents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateAgentRequest calls the generic UpdateAgent builder with application/json body
func NewUpdateAgentRequest(server string, id openapi_types.UUID, body UpdateAgentJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateAgentRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateAgentRequestWithBody generates requests for UpdateAgent with any type of body
func NewUpdateAgentRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/agents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetOperatorsRequest generates requests for GetOperators
func NewGetOperatorsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/autonomy-policies/operators")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetToolInvocationPoliciesRequest generates requests for GetToolInvocationPolicies
func NewGetToolInvocationPoliciesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/autonomy-policies/tool-invocation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateToolInvocationPolicyRequest calls the generic CreateToolInvocationPolicy builder with application/json body
func NewCreateToolInvocationPolicyRequest(server string, body CreateToolInvocationPolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateToolInvocationPolicyRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateToolInvocationPolicyRequestWithBody generates requests for CreateToolInvocationPolicy with any type of body
func NewCreateToolInvocationPolicyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/autonomy-policies/tool-invocation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteToolInvocationPolicyRequest generates requests for DeleteToolInvocationPolicy
func NewDeleteToolInvocationPolicyRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/autonomy-policies/tool-invocation/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetToolInvocationPolicyRequest generates requests for GetToolInvocationPolicy
func NewGetToolInvocationPolicyRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/autonomy-policies/tool-invocation/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateToolInvocationPolicyRequest calls the generic UpdateToolInvocationPolicy builder with application/json body
func NewUpdateToolInvocationPolicyRequest(server string, id openapi_types.UUID, body UpdateToolInvocationPolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateToolInvocationPolicyRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateToolInvocationPolicyRequestWithBody generates requests for UpdateToolInvocationPolicy with any type of body
func NewUpdateToolInvocationPolicyRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/autonomy-policies/tool-invocation/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDualLlmConfigsRequest generates requests for GetDualLlmConfigs
func NewGetDualLlmConfigsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/dual-llm-config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateDualLlmConfigRequest calls the generic CreateDualLlmConfig builder with application/json body
func NewCreateDualLlmConfigRequest(server string, body CreateDualLlmConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateDualLlmConfigRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateDualLlmConfigRequestWithBody generates requests for CreateDualLlmConfig with any type of body
func NewCreateDualLlmConfigRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/dual-llm-config")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDefaultDualLlmConfigRequest generates requests for GetDefaultDualLlmConfig
func NewGetDefaultDualLlmConfigRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/dual-llm-config/default")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewDeleteDualLlmConfigRequest generates requests for DeleteDualLlmConfig
func NewDeleteDualLlmConfigRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/dual-llm-config/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDualLlmConfigRequest generates requests for GetDualLlmConfig
func NewGetDualLlmConfigRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/dual-llm-config/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateDualLlmConfigRequest calls the generic UpdateDualLlmConfig builder with application/json body
func NewUpdateDualLlmConfigRequest(server string, id openapi_types.UUID, body UpdateDualLlmConfigJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateDualLlmConfigRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateDualLlmConfigRequestWithBody generates requests for UpdateDualLlmConfig with any type of body
func NewUpdateDualLlmConfigRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/dual-llm-config/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetDualLlmResultsByInteractionRequest generates requests for GetDualLlmResultsByInteraction
func NewGetDualLlmResultsByInteractionRequest(server string, interactionId openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "interactionId", runtime.ParamLocationPath, interactionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/dual-llm-results/by-interaction/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetDualLlmResultByToolCallIdRequest generates requests for GetDualLlmResultByToolCallId
func NewGetDualLlmResultByToolCallIdRequest(server string, toolCallId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "toolCallId", runtime.ParamLocationPath, toolCallId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/dual-llm-results/by-tool-call-id/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetFeaturesRequest generates requests for GetFeatures
func NewGetFeaturesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/features")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInternalMcpCatalogRequest generates requests for GetInternalMcpCatalog
func NewGetInternalMcpCatalogRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/internal_mcp_catalog")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateInternalMcpCatalogItemRequest calls the generic CreateInternalMcpCatalogItem builder with application/json body
func NewCreateInternalMcpCatalogItemRequest(server string, body CreateInternalMcpCatalogItemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateInternalMcpCatalogItemRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateInternalMcpCatalogItemRequestWithBody generates requests for CreateInternalMcpCatalogItem with any type of body
func NewCreateInternalMcpCatalogItemRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/internal_mcp_catalog")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteInternalMcpCatalogItemRequest generates requests for DeleteInternalMcpCatalogItem
func NewDeleteInternalMcpCatalogItemRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/internal_mcp_catalog/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetInternalMcpCatalogItemRequest generates requests for GetInternalMcpCatalogItem
func NewGetInternalMcpCatalogItemRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/internal_mcp_catalog/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateInternalMcpCatalogItemRequest calls the generic UpdateInternalMcpCatalogItem builder with application/json body
func NewUpdateInternalMcpCatalogItemRequest(server string, id openapi_types.UUID, body UpdateInternalMcpCatalogItemJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateInternalMcpCatalogItemRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateInternalMcpCatalogItemRequestWithBody generates requests for UpdateInternalMcpCatalogItem with any type of body
func NewUpdateInternalMcpCatalogItemRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/internal_mcp_catalog/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMcpServersRequest generates requests for GetMcpServers
func NewGetMcpServersRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/mcp_server")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewInstallMcpServerRequest calls the generic InstallMcpServer builder with application/json body
func NewInstallMcpServerRequest(server string, body InstallMcpServerJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewInstallMcpServerRequestWithBody(server, "application/json", bodyReader)
}

// NewInstallMcpServerRequestWithBody generates requests for InstallMcpServer with any type of body
func NewInstallMcpServerRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/mcp_server")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteMcpServerRequest generates requests for DeleteMcpServer
func NewDeleteMcpServerRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/mcp_server/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMcpServerRequest generates requests for GetMcpServer
func NewGetMcpServerRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/mcp_server/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamsRequest generates requests for GetTeams
func NewGetTeamsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/teams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTeamRequest calls the generic CreateTeam builder with application/json body
func NewCreateTeamRequest(server string, body CreateTeamJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTeamRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateTeamRequestWithBody generates requests for CreateTeam with any type of body
func NewCreateTeamRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/teams")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTeamRequest generates requests for DeleteTeam
func NewDeleteTeamRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTeamRequest generates requests for GetTeam
func NewGetTeamRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTeamRequest calls the generic UpdateTeam builder with application/json body
func NewUpdateTeamRequest(server string, id string, body UpdateTeamJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTeamRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateTeamRequestWithBody generates requests for UpdateTeam with any type of body
func NewUpdateTeamRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/teams/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTeamMembersRequest generates requests for GetTeamMembers
func NewGetTeamMembersRequest(server string, id string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/teams/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewAddTeamMemberRequest calls the generic AddTeamMember builder with application/json body
func NewAddTeamMemberRequest(server string, id string, body AddTeamMemberJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAddTeamMemberRequestWithBody(server, id, "application/json", bodyReader)
}

// NewAddTeamMemberRequestWithBody generates requests for AddTeamMember with any type of body
func NewAddTeamMemberRequestWithBody(server string, id string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/teams/%s/members", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewRemoveTeamMemberRequest generates requests for RemoveTeamMember
func NewRemoveTeamMemberRequest(server string, id string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/teams/%s/members/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetToolsRequest generates requests for GetTools
func NewGetToolsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tools")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUnassignedToolsRequest generates requests for GetUnassignedTools
func NewGetUnassignedToolsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/tools/unassigned")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTrustedDataPoliciesRequest generates requests for GetTrustedDataPolicies
func NewGetTrustedDataPoliciesRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/trusted-data-policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateTrustedDataPolicyRequest calls the generic CreateTrustedDataPolicy builder with application/json body
func NewCreateTrustedDataPolicyRequest(server string, body CreateTrustedDataPolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateTrustedDataPolicyRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateTrustedDataPolicyRequestWithBody generates requests for CreateTrustedDataPolicy with any type of body
func NewCreateTrustedDataPolicyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/trusted-data-policies")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTrustedDataPolicyRequest generates requests for DeleteTrustedDataPolicy
func NewDeleteTrustedDataPolicyRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/trusted-data-policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetTrustedDataPolicyRequest generates requests for GetTrustedDataPolicy
func NewGetTrustedDataPolicyRequest(server string, id openapi_types.UUID) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/trusted-data-policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewUpdateTrustedDataPolicyRequest calls the generic UpdateTrustedDataPolicy builder with application/json body
func NewUpdateTrustedDataPolicyRequest(server string, id openapi_types.UUID, body UpdateTrustedDataPolicyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewUpdateTrustedDataPolicyRequestWithBody(server, id, "application/json", bodyReader)
}

// NewUpdateTrustedDataPolicyRequestWithBody generates requests for UpdateTrustedDataPolicy with any type of body
func NewUpdateTrustedDataPolicyRequestWithBody(server string, id openapi_types.UUID, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "id", runtime.ParamLocationPath, id)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/trusted-data-policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetHealthRequest generates requests for GetHealth
func NewGetHealthRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/health")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAllAgentToolsWithResponse request
	GetAllAgentToolsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllAgentToolsResponse, error)

	// UpdateAgentToolWithBodyWithResponse request with any body
	UpdateAgentToolWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAgentToolResponse, error)

	UpdateAgentToolWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateAgentToolJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAgentToolResponse, error)

	// GetAgentsWithResponse request
	GetAgentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAgentsResponse, error)

	// CreateAgentWithBodyWithResponse request with any body
	CreateAgentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAgentResponse, error)

	CreateAgentWithResponse(ctx context.Context, body CreateAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAgentResponse, error)

	// GetDefaultAgentWithResponse request
	GetDefaultAgentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDefaultAgentResponse, error)

	// GetAgentToolsWithResponse request
	GetAgentToolsWithResponse(ctx context.Context, agentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetAgentToolsResponse, error)

	// UnassignToolFromAgentWithResponse request
	UnassignToolFromAgentWithResponse(ctx context.Context, agentId openapi_types.UUID, toolId openapi_types.UUID, reqEditors ...RequestEditorFn) (*UnassignToolFromAgentResponse, error)

	// AssignToolToAgentWithResponse request
	AssignToolToAgentWithResponse(ctx context.Context, agentId openapi_types.UUID, toolId openapi_types.UUID, reqEditors ...RequestEditorFn) (*AssignToolToAgentResponse, error)

	// DeleteAgentWithResponse request
	DeleteAgentWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteAgentResponse, error)

	// GetAgentWithResponse request
	GetAgentWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetAgentResponse, error)

	// UpdateAgentWithBodyWithResponse request with any body
	UpdateAgentWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAgentResponse, error)

	UpdateAgentWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAgentResponse, error)

	// GetOperatorsWithResponse request
	GetOperatorsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOperatorsResponse, error)

	// GetToolInvocationPoliciesWithResponse request
	GetToolInvocationPoliciesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetToolInvocationPoliciesResponse, error)

	// CreateToolInvocationPolicyWithBodyWithResponse request with any body
	CreateToolInvocationPolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateToolInvocationPolicyResponse, error)

	CreateToolInvocationPolicyWithResponse(ctx context.Context, body CreateToolInvocationPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateToolInvocationPolicyResponse, error)

	// DeleteToolInvocationPolicyWithResponse request
	DeleteToolInvocationPolicyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteToolInvocationPolicyResponse, error)

	// GetToolInvocationPolicyWithResponse request
	GetToolInvocationPolicyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetToolInvocationPolicyResponse, error)

	// UpdateToolInvocationPolicyWithBodyWithResponse request with any body
	UpdateToolInvocationPolicyWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateToolInvocationPolicyResponse, error)

	UpdateToolInvocationPolicyWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateToolInvocationPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateToolInvocationPolicyResponse, error)

	// GetDualLlmConfigsWithResponse request
	GetDualLlmConfigsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDualLlmConfigsResponse, error)

	// CreateDualLlmConfigWithBodyWithResponse request with any body
	CreateDualLlmConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDualLlmConfigResponse, error)

	CreateDualLlmConfigWithResponse(ctx context.Context, body CreateDualLlmConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDualLlmConfigResponse, error)

	// GetDefaultDualLlmConfigWithResponse request
	GetDefaultDualLlmConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDefaultDualLlmConfigResponse, error)

	// DeleteDualLlmConfigWithResponse request
	DeleteDualLlmConfigWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteDualLlmConfigResponse, error)

	// GetDualLlmConfigWithResponse request
	GetDualLlmConfigWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetDualLlmConfigResponse, error)

	// UpdateDualLlmConfigWithBodyWithResponse request with any body
	UpdateDualLlmConfigWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDualLlmConfigResponse, error)

	UpdateDualLlmConfigWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateDualLlmConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDualLlmConfigResponse, error)

	// GetDualLlmResultsByInteractionWithResponse request
	GetDualLlmResultsByInteractionWithResponse(ctx context.Context, interactionId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetDualLlmResultsByInteractionResponse, error)

	// GetDualLlmResultByToolCallIdWithResponse request
	GetDualLlmResultByToolCallIdWithResponse(ctx context.Context, toolCallId string, reqEditors ...RequestEditorFn) (*GetDualLlmResultByToolCallIdResponse, error)

	// GetFeaturesWithResponse request
	GetFeaturesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFeaturesResponse, error)

	// GetInternalMcpCatalogWithResponse request
	GetInternalMcpCatalogWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInternalMcpCatalogResponse, error)

	// CreateInternalMcpCatalogItemWithBodyWithResponse request with any body
	CreateInternalMcpCatalogItemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateInternalMcpCatalogItemResponse, error)

	CreateInternalMcpCatalogItemWithResponse(ctx context.Context, body CreateInternalMcpCatalogItemJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateInternalMcpCatalogItemResponse, error)

	// DeleteInternalMcpCatalogItemWithResponse request
	DeleteInternalMcpCatalogItemWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteInternalMcpCatalogItemResponse, error)

	// GetInternalMcpCatalogItemWithResponse request
	GetInternalMcpCatalogItemWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetInternalMcpCatalogItemResponse, error)

	// UpdateInternalMcpCatalogItemWithBodyWithResponse request with any body
	UpdateInternalMcpCatalogItemWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateInternalMcpCatalogItemResponse, error)

	UpdateInternalMcpCatalogItemWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateInternalMcpCatalogItemJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateInternalMcpCatalogItemResponse, error)

	// GetMcpServersWithResponse request
	GetMcpServersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMcpServersResponse, error)

	// InstallMcpServerWithBodyWithResponse request with any body
	InstallMcpServerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstallMcpServerResponse, error)

	InstallMcpServerWithResponse(ctx context.Context, body InstallMcpServerJSONRequestBody, reqEditors ...RequestEditorFn) (*InstallMcpServerResponse, error)

	// DeleteMcpServerWithResponse request
	DeleteMcpServerWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteMcpServerResponse, error)

	// GetMcpServerWithResponse request
	GetMcpServerWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetMcpServerResponse, error)

	// GetTeamsWithResponse request
	GetTeamsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTeamsResponse, error)

	// CreateTeamWithBodyWithResponse request with any body
	CreateTeamWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error)

	CreateTeamWithResponse(ctx context.Context, body CreateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error)

	// DeleteTeamWithResponse request
	DeleteTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTeamResponse, error)

	// GetTeamWithResponse request
	GetTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTeamResponse, error)

	// UpdateTeamWithBodyWithResponse request with any body
	UpdateTeamWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error)

	UpdateTeamWithResponse(ctx context.Context, id string, body UpdateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error)

	// GetTeamMembersWithResponse request
	GetTeamMembersWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTeamMembersResponse, error)

	// AddTeamMemberWithBodyWithResponse request with any body
	AddTeamMemberWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddTeamMemberResponse, error)

	AddTeamMemberWithResponse(ctx context.Context, id string, body AddTeamMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*AddTeamMemberResponse, error)

	// RemoveTeamMemberWithResponse request
	RemoveTeamMemberWithResponse(ctx context.Context, id string, userId string, reqEditors ...RequestEditorFn) (*RemoveTeamMemberResponse, error)

	// GetToolsWithResponse request
	GetToolsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetToolsResponse, error)

	// GetUnassignedToolsWithResponse request
	GetUnassignedToolsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUnassignedToolsResponse, error)

	// GetTrustedDataPoliciesWithResponse request
	GetTrustedDataPoliciesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTrustedDataPoliciesResponse, error)

	// CreateTrustedDataPolicyWithBodyWithResponse request with any body
	CreateTrustedDataPolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTrustedDataPolicyResponse, error)

	CreateTrustedDataPolicyWithResponse(ctx context.Context, body CreateTrustedDataPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTrustedDataPolicyResponse, error)

	// DeleteTrustedDataPolicyWithResponse request
	DeleteTrustedDataPolicyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteTrustedDataPolicyResponse, error)

	// GetTrustedDataPolicyWithResponse request
	GetTrustedDataPolicyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetTrustedDataPolicyResponse, error)

	// UpdateTrustedDataPolicyWithBodyWithResponse request with any body
	UpdateTrustedDataPolicyWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTrustedDataPolicyResponse, error)

	UpdateTrustedDataPolicyWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateTrustedDataPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTrustedDataPolicyResponse, error)

	// GetHealthWithResponse request
	GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error)
}

type GetAllAgentToolsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Agent struct {
			Id   string `json:"id"`
			Name string `json:"name"`
		} `json:"agent"`
		AllowUsageWhenUntrustedDataIsPresent bool               `json:"allowUsageWhenUntrustedDataIsPresent"`
		CreatedAt                            time.Time          `json:"createdAt"`
		Id                                   openapi_types.UUID `json:"id"`
		ResponseModifierTemplate             *string            `json:"responseModifierTemplate"`
		Tool                                 struct {
			CreatedAt     time.Time                             `json:"createdAt"`
			Description   *string                               `json:"description"`
			Id            string                                `json:"id"`
			McpServerId   *string                               `json:"mcpServerId"`
			McpServerName *string                               `json:"mcpServerName"`
			Name          string                                `json:"name"`
			Parameters    *GetAllAgentTools_200_Tool_Parameters `json:"parameters,omitempty"`
			UpdatedAt     time.Time                             `json:"updatedAt"`
		} `json:"tool"`
		ToolResultTreatment GetAllAgentTools200ToolResultTreatment `json:"toolResultTreatment"`
		UpdatedAt           time.Time                              `json:"updatedAt"`
	}
	JSON401 *struct {
		Error GetAllAgentTools_401_Error `json:"error"`
	}
	JSON500 *struct {
		Error GetAllAgentTools_500_Error `json:"error"`
	}
}
type GetAllAgentTools200ToolParameters0 map[string]interface{}
type GetAllAgentTools_200_Tool_Parameters struct {
	union json.RawMessage
}
type GetAllAgentTools200ToolResultTreatment string
type GetAllAgentTools401Error0 = string
type GetAllAgentTools401Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetAllAgentTools_401_Error struct {
	union json.RawMessage
}
type GetAllAgentTools500Error0 = string
type GetAllAgentTools500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetAllAgentTools_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r GetAllAgentToolsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllAgentToolsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAgentToolResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AgentId                              *openapi_types.UUID                   `json:"agentId,omitempty"`
		AllowUsageWhenUntrustedDataIsPresent *bool                                 `json:"allowUsageWhenUntrustedDataIsPresent,omitempty"`
		CreatedAt                            *time.Time                            `json:"createdAt,omitempty"`
		Id                                   *openapi_types.UUID                   `json:"id,omitempty"`
		ResponseModifierTemplate             *string                               `json:"responseModifierTemplate"`
		ToolId                               *openapi_types.UUID                   `json:"toolId,omitempty"`
		ToolResultTreatment                  UpdateAgentTool200ToolResultTreatment `json:"toolResultTreatment"`
		UpdatedAt                            *time.Time                            `json:"updatedAt,omitempty"`
	}
	JSON404 *struct {
		Error UpdateAgentTool_404_Error `json:"error"`
	}
	JSON500 *struct {
		Error UpdateAgentTool_500_Error `json:"error"`
	}
}
type UpdateAgentTool200ToolResultTreatment string
type UpdateAgentTool404Error0 = string
type UpdateAgentTool404Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type UpdateAgentTool_404_Error struct {
	union json.RawMessage
}
type UpdateAgentTool500Error0 = string
type UpdateAgentTool500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type UpdateAgentTool_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r UpdateAgentToolResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAgentToolResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAgentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		CreatedAt time.Time          `json:"createdAt"`
		Id        openapi_types.UUID `json:"id"`
		IsDefault bool               `json:"isDefault"`
		IsDemo    bool               `json:"isDemo"`
		Name      string             `json:"name"`
		Teams     []string           `json:"teams"`
		Tools     []struct {
			AgentId     *openapi_types.UUID             `json:"agentId"`
			CreatedAt   time.Time                       `json:"createdAt"`
			Description *string                         `json:"description"`
			Id          openapi_types.UUID              `json:"id"`
			McpServerId *openapi_types.UUID             `json:"mcpServerId"`
			Name        string                          `json:"name"`
			Parameters  *GetAgents_200_Tools_Parameters `json:"parameters,omitempty"`
			UpdatedAt   time.Time                       `json:"updatedAt"`
		} `json:"tools"`
		UpdatedAt time.Time `json:"updatedAt"`
	}
	JSON401 *struct {
		Error GetAgents_401_Error `json:"error"`
	}
	JSON500 *struct {
		Error GetAgents_500_Error `json:"error"`
	}
}
type GetAgents200ToolsParameters0 map[string]interface{}
type GetAgents_200_Tools_Parameters struct {
	union json.RawMessage
}
type GetAgents401Error0 = string
type GetAgents401Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetAgents_401_Error struct {
	union json.RawMessage
}
type GetAgents500Error0 = string
type GetAgents500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetAgents_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r GetAgentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAgentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedAt time.Time          `json:"createdAt"`
		Id        openapi_types.UUID `json:"id"`
		IsDefault bool               `json:"isDefault"`
		IsDemo    bool               `json:"isDemo"`
		Name      string             `json:"name"`
		Teams     []string           `json:"teams"`
		Tools     []struct {
			AgentId     *openapi_types.UUID               `json:"agentId"`
			CreatedAt   time.Time                         `json:"createdAt"`
			Description *string                           `json:"description"`
			Id          openapi_types.UUID                `json:"id"`
			McpServerId *openapi_types.UUID               `json:"mcpServerId"`
			Name        string                            `json:"name"`
			Parameters  *CreateAgent_200_Tools_Parameters `json:"parameters,omitempty"`
			UpdatedAt   time.Time                         `json:"updatedAt"`
		} `json:"tools"`
		UpdatedAt time.Time `json:"updatedAt"`
	}
	JSON401 *struct {
		Error CreateAgent_401_Error `json:"error"`
	}
	JSON500 *struct {
		Error CreateAgent_500_Error `json:"error"`
	}
}
type CreateAgent200ToolsParameters0 map[string]interface{}
type CreateAgent_200_Tools_Parameters struct {
	union json.RawMessage
}
type CreateAgent401Error0 = string
type CreateAgent401Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type CreateAgent_401_Error struct {
	union json.RawMessage
}
type CreateAgent500Error0 = string
type CreateAgent500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type CreateAgent_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r CreateAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDefaultAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedAt time.Time          `json:"createdAt"`
		Id        openapi_types.UUID `json:"id"`
		IsDefault bool               `json:"isDefault"`
		IsDemo    bool               `json:"isDemo"`
		Name      string             `json:"name"`
		Teams     []string           `json:"teams"`
		Tools     []struct {
			AgentId     *openapi_types.UUID                   `json:"agentId"`
			CreatedAt   time.Time                             `json:"createdAt"`
			Description *string                               `json:"description"`
			Id          openapi_types.UUID                    `json:"id"`
			McpServerId *openapi_types.UUID                   `json:"mcpServerId"`
			Name        string                                `json:"name"`
			Parameters  *GetDefaultAgent_200_Tools_Parameters `json:"parameters,omitempty"`
			UpdatedAt   time.Time                             `json:"updatedAt"`
		} `json:"tools"`
		UpdatedAt time.Time `json:"updatedAt"`
	}
	JSON401 *struct {
		Error GetDefaultAgent_401_Error `json:"error"`
	}
	JSON500 *struct {
		Error GetDefaultAgent_500_Error `json:"error"`
	}
}
type GetDefaultAgent200ToolsParameters0 map[string]interface{}
type GetDefaultAgent_200_Tools_Parameters struct {
	union json.RawMessage
}
type GetDefaultAgent401Error0 = string
type GetDefaultAgent401Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetDefaultAgent_401_Error struct {
	union json.RawMessage
}
type GetDefaultAgent500Error0 = string
type GetDefaultAgent500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetDefaultAgent_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r GetDefaultAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDefaultAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAgentToolsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		AgentId     *openapi_types.UUID           `json:"agentId"`
		CreatedAt   time.Time                     `json:"createdAt"`
		Description *string                       `json:"description"`
		Id          openapi_types.UUID            `json:"id"`
		McpServerId *openapi_types.UUID           `json:"mcpServerId"`
		Name        string                        `json:"name"`
		Parameters  *GetAgentTools_200_Parameters `json:"parameters,omitempty"`
		UpdatedAt   time.Time                     `json:"updatedAt"`
	}
	JSON404 *struct {
		Error GetAgentTools_404_Error `json:"error"`
	}
	JSON500 *struct {
		Error GetAgentTools_500_Error `json:"error"`
	}
}
type GetAgentTools200Parameters0 map[string]interface{}
type GetAgentTools_200_Parameters struct {
	union json.RawMessage
}
type GetAgentTools404Error0 = string
type GetAgentTools404Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetAgentTools_404_Error struct {
	union json.RawMessage
}
type GetAgentTools500Error0 = string
type GetAgentTools500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetAgentTools_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r GetAgentToolsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAgentToolsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UnassignToolFromAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success bool `json:"success"`
	}
	JSON500 *struct {
		Error UnassignToolFromAgent_500_Error `json:"error"`
	}
}
type UnassignToolFromAgent500Error0 = string
type UnassignToolFromAgent500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type UnassignToolFromAgent_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r UnassignToolFromAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UnassignToolFromAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AssignToolToAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success bool `json:"success"`
	}
	JSON404 *struct {
		Error AssignToolToAgent_404_Error `json:"error"`
	}
	JSON500 *struct {
		Error AssignToolToAgent_500_Error `json:"error"`
	}
}
type AssignToolToAgent404Error0 = string
type AssignToolToAgent404Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type AssignToolToAgent_404_Error struct {
	union json.RawMessage
}
type AssignToolToAgent500Error0 = string
type AssignToolToAgent500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type AssignToolToAgent_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r AssignToolToAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AssignToolToAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success bool `json:"success"`
	}
	JSON404 *struct {
		Error DeleteAgent_404_Error `json:"error"`
	}
	JSON500 *struct {
		Error DeleteAgent_500_Error `json:"error"`
	}
}
type DeleteAgent404Error0 = string
type DeleteAgent404Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type DeleteAgent_404_Error struct {
	union json.RawMessage
}
type DeleteAgent500Error0 = string
type DeleteAgent500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type DeleteAgent_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r DeleteAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedAt time.Time          `json:"createdAt"`
		Id        openapi_types.UUID `json:"id"`
		IsDefault bool               `json:"isDefault"`
		IsDemo    bool               `json:"isDemo"`
		Name      string             `json:"name"`
		Teams     []string           `json:"teams"`
		Tools     []struct {
			AgentId     *openapi_types.UUID            `json:"agentId"`
			CreatedAt   time.Time                      `json:"createdAt"`
			Description *string                        `json:"description"`
			Id          openapi_types.UUID             `json:"id"`
			McpServerId *openapi_types.UUID            `json:"mcpServerId"`
			Name        string                         `json:"name"`
			Parameters  *GetAgent_200_Tools_Parameters `json:"parameters,omitempty"`
			UpdatedAt   time.Time                      `json:"updatedAt"`
		} `json:"tools"`
		UpdatedAt time.Time `json:"updatedAt"`
	}
	JSON401 *struct {
		Error GetAgent_401_Error `json:"error"`
	}
	JSON404 *struct {
		Error GetAgent_404_Error `json:"error"`
	}
	JSON500 *struct {
		Error GetAgent_500_Error `json:"error"`
	}
}
type GetAgent200ToolsParameters0 map[string]interface{}
type GetAgent_200_Tools_Parameters struct {
	union json.RawMessage
}
type GetAgent401Error0 = string
type GetAgent401Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetAgent_401_Error struct {
	union json.RawMessage
}
type GetAgent404Error0 = string
type GetAgent404Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetAgent_404_Error struct {
	union json.RawMessage
}
type GetAgent500Error0 = string
type GetAgent500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetAgent_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r GetAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateAgentResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedAt time.Time          `json:"createdAt"`
		Id        openapi_types.UUID `json:"id"`
		IsDefault bool               `json:"isDefault"`
		IsDemo    bool               `json:"isDemo"`
		Name      string             `json:"name"`
		Teams     []string           `json:"teams"`
		Tools     []struct {
			AgentId     *openapi_types.UUID               `json:"agentId"`
			CreatedAt   time.Time                         `json:"createdAt"`
			Description *string                           `json:"description"`
			Id          openapi_types.UUID                `json:"id"`
			McpServerId *openapi_types.UUID               `json:"mcpServerId"`
			Name        string                            `json:"name"`
			Parameters  *UpdateAgent_200_Tools_Parameters `json:"parameters,omitempty"`
			UpdatedAt   time.Time                         `json:"updatedAt"`
		} `json:"tools"`
		UpdatedAt time.Time `json:"updatedAt"`
	}
	JSON404 *struct {
		Error UpdateAgent_404_Error `json:"error"`
	}
	JSON500 *struct {
		Error UpdateAgent_500_Error `json:"error"`
	}
}
type UpdateAgent200ToolsParameters0 map[string]interface{}
type UpdateAgent_200_Tools_Parameters struct {
	union json.RawMessage
}
type UpdateAgent404Error0 = string
type UpdateAgent404Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type UpdateAgent_404_Error struct {
	union json.RawMessage
}
type UpdateAgent500Error0 = string
type UpdateAgent500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type UpdateAgent_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r UpdateAgentResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateAgentResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetOperatorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Label string               `json:"label"`
		Value GetOperators200Value `json:"value"`
	}
}
type GetOperators200Value string

// Status returns HTTPResponse.Status
func (r GetOperatorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetOperatorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetToolInvocationPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Action       GetToolInvocationPolicies200Action   `json:"action"`
		AgentToolId  openapi_types.UUID                   `json:"agentToolId"`
		ArgumentName string                               `json:"argumentName"`
		CreatedAt    time.Time                            `json:"createdAt"`
		Id           openapi_types.UUID                   `json:"id"`
		Operator     GetToolInvocationPolicies200Operator `json:"operator"`
		Reason       *string                              `json:"reason"`
		UpdatedAt    time.Time                            `json:"updatedAt"`
		Value        string                               `json:"value"`
	}
	JSON500 *struct {
		Error GetToolInvocationPolicies_500_Error `json:"error"`
	}
}
type GetToolInvocationPolicies200Action string
type GetToolInvocationPolicies200Operator string
type GetToolInvocationPolicies500Error0 = string
type GetToolInvocationPolicies500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetToolInvocationPolicies_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r GetToolInvocationPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetToolInvocationPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateToolInvocationPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Action       CreateToolInvocationPolicy200Action   `json:"action"`
		AgentToolId  openapi_types.UUID                    `json:"agentToolId"`
		ArgumentName string                                `json:"argumentName"`
		CreatedAt    time.Time                             `json:"createdAt"`
		Id           openapi_types.UUID                    `json:"id"`
		Operator     CreateToolInvocationPolicy200Operator `json:"operator"`
		Reason       *string                               `json:"reason"`
		UpdatedAt    time.Time                             `json:"updatedAt"`
		Value        string                                `json:"value"`
	}
	JSON500 *struct {
		Error CreateToolInvocationPolicy_500_Error `json:"error"`
	}
}
type CreateToolInvocationPolicy200Action string
type CreateToolInvocationPolicy200Operator string
type CreateToolInvocationPolicy500Error0 = string
type CreateToolInvocationPolicy500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type CreateToolInvocationPolicy_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r CreateToolInvocationPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateToolInvocationPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteToolInvocationPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success bool `json:"success"`
	}
	JSON404 *struct {
		Error DeleteToolInvocationPolicy_404_Error `json:"error"`
	}
	JSON500 *struct {
		Error DeleteToolInvocationPolicy_500_Error `json:"error"`
	}
}
type DeleteToolInvocationPolicy404Error0 = string
type DeleteToolInvocationPolicy404Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type DeleteToolInvocationPolicy_404_Error struct {
	union json.RawMessage
}
type DeleteToolInvocationPolicy500Error0 = string
type DeleteToolInvocationPolicy500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type DeleteToolInvocationPolicy_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r DeleteToolInvocationPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteToolInvocationPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetToolInvocationPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Action       GetToolInvocationPolicy200Action   `json:"action"`
		AgentToolId  openapi_types.UUID                 `json:"agentToolId"`
		ArgumentName string                             `json:"argumentName"`
		CreatedAt    time.Time                          `json:"createdAt"`
		Id           openapi_types.UUID                 `json:"id"`
		Operator     GetToolInvocationPolicy200Operator `json:"operator"`
		Reason       *string                            `json:"reason"`
		UpdatedAt    time.Time                          `json:"updatedAt"`
		Value        string                             `json:"value"`
	}
	JSON404 *struct {
		Error GetToolInvocationPolicy_404_Error `json:"error"`
	}
	JSON500 *struct {
		Error GetToolInvocationPolicy_500_Error `json:"error"`
	}
}
type GetToolInvocationPolicy200Action string
type GetToolInvocationPolicy200Operator string
type GetToolInvocationPolicy404Error0 = string
type GetToolInvocationPolicy404Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetToolInvocationPolicy_404_Error struct {
	union json.RawMessage
}
type GetToolInvocationPolicy500Error0 = string
type GetToolInvocationPolicy500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetToolInvocationPolicy_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r GetToolInvocationPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetToolInvocationPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateToolInvocationPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Action       UpdateToolInvocationPolicy200Action   `json:"action"`
		AgentToolId  openapi_types.UUID                    `json:"agentToolId"`
		ArgumentName string                                `json:"argumentName"`
		CreatedAt    time.Time                             `json:"createdAt"`
		Id           openapi_types.UUID                    `json:"id"`
		Operator     UpdateToolInvocationPolicy200Operator `json:"operator"`
		Reason       *string                               `json:"reason"`
		UpdatedAt    time.Time                             `json:"updatedAt"`
		Value        string                                `json:"value"`
	}
	JSON404 *struct {
		Error UpdateToolInvocationPolicy_404_Error `json:"error"`
	}
	JSON500 *struct {
		Error UpdateToolInvocationPolicy_500_Error `json:"error"`
	}
}
type UpdateToolInvocationPolicy200Action string
type UpdateToolInvocationPolicy200Operator string
type UpdateToolInvocationPolicy404Error0 = string
type UpdateToolInvocationPolicy404Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type UpdateToolInvocationPolicy_404_Error struct {
	union json.RawMessage
}
type UpdateToolInvocationPolicy500Error0 = string
type UpdateToolInvocationPolicy500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type UpdateToolInvocationPolicy_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r UpdateToolInvocationPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateToolInvocationPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDualLlmConfigsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		CreatedAt              time.Time          `json:"createdAt"`
		Enabled                bool               `json:"enabled"`
		Id                     openapi_types.UUID `json:"id"`
		MainAgentPrompt        string             `json:"mainAgentPrompt"`
		MaxRounds              int                `json:"maxRounds"`
		QuarantinedAgentPrompt string             `json:"quarantinedAgentPrompt"`
		SummaryPrompt          string             `json:"summaryPrompt"`
		UpdatedAt              time.Time          `json:"updatedAt"`
	}
	JSON500 *struct {
		Error GetDualLlmConfigs_500_Error `json:"error"`
	}
}
type GetDualLlmConfigs500Error0 = string
type GetDualLlmConfigs500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetDualLlmConfigs_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r GetDualLlmConfigsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDualLlmConfigsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateDualLlmConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedAt              time.Time          `json:"createdAt"`
		Enabled                bool               `json:"enabled"`
		Id                     openapi_types.UUID `json:"id"`
		MainAgentPrompt        string             `json:"mainAgentPrompt"`
		MaxRounds              int                `json:"maxRounds"`
		QuarantinedAgentPrompt string             `json:"quarantinedAgentPrompt"`
		SummaryPrompt          string             `json:"summaryPrompt"`
		UpdatedAt              time.Time          `json:"updatedAt"`
	}
	JSON500 *struct {
		Error CreateDualLlmConfig_500_Error `json:"error"`
	}
}
type CreateDualLlmConfig500Error0 = string
type CreateDualLlmConfig500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type CreateDualLlmConfig_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r CreateDualLlmConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateDualLlmConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDefaultDualLlmConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedAt              time.Time          `json:"createdAt"`
		Enabled                bool               `json:"enabled"`
		Id                     openapi_types.UUID `json:"id"`
		MainAgentPrompt        string             `json:"mainAgentPrompt"`
		MaxRounds              int                `json:"maxRounds"`
		QuarantinedAgentPrompt string             `json:"quarantinedAgentPrompt"`
		SummaryPrompt          string             `json:"summaryPrompt"`
		UpdatedAt              time.Time          `json:"updatedAt"`
	}
	JSON500 *struct {
		Error GetDefaultDualLlmConfig_500_Error `json:"error"`
	}
}
type GetDefaultDualLlmConfig500Error0 = string
type GetDefaultDualLlmConfig500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetDefaultDualLlmConfig_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r GetDefaultDualLlmConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDefaultDualLlmConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteDualLlmConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success bool `json:"success"`
	}
	JSON404 *struct {
		Error DeleteDualLlmConfig_404_Error `json:"error"`
	}
	JSON500 *struct {
		Error DeleteDualLlmConfig_500_Error `json:"error"`
	}
}
type DeleteDualLlmConfig404Error0 = string
type DeleteDualLlmConfig404Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type DeleteDualLlmConfig_404_Error struct {
	union json.RawMessage
}
type DeleteDualLlmConfig500Error0 = string
type DeleteDualLlmConfig500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type DeleteDualLlmConfig_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r DeleteDualLlmConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteDualLlmConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDualLlmConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedAt              time.Time          `json:"createdAt"`
		Enabled                bool               `json:"enabled"`
		Id                     openapi_types.UUID `json:"id"`
		MainAgentPrompt        string             `json:"mainAgentPrompt"`
		MaxRounds              int                `json:"maxRounds"`
		QuarantinedAgentPrompt string             `json:"quarantinedAgentPrompt"`
		SummaryPrompt          string             `json:"summaryPrompt"`
		UpdatedAt              time.Time          `json:"updatedAt"`
	}
	JSON404 *struct {
		Error GetDualLlmConfig_404_Error `json:"error"`
	}
	JSON500 *struct {
		Error GetDualLlmConfig_500_Error `json:"error"`
	}
}
type GetDualLlmConfig404Error0 = string
type GetDualLlmConfig404Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetDualLlmConfig_404_Error struct {
	union json.RawMessage
}
type GetDualLlmConfig500Error0 = string
type GetDualLlmConfig500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetDualLlmConfig_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r GetDualLlmConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDualLlmConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateDualLlmConfigResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedAt              time.Time          `json:"createdAt"`
		Enabled                bool               `json:"enabled"`
		Id                     openapi_types.UUID `json:"id"`
		MainAgentPrompt        string             `json:"mainAgentPrompt"`
		MaxRounds              int                `json:"maxRounds"`
		QuarantinedAgentPrompt string             `json:"quarantinedAgentPrompt"`
		SummaryPrompt          string             `json:"summaryPrompt"`
		UpdatedAt              time.Time          `json:"updatedAt"`
	}
	JSON404 *struct {
		Error UpdateDualLlmConfig_404_Error `json:"error"`
	}
	JSON500 *struct {
		Error UpdateDualLlmConfig_500_Error `json:"error"`
	}
}
type UpdateDualLlmConfig404Error0 = string
type UpdateDualLlmConfig404Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type UpdateDualLlmConfig_404_Error struct {
	union json.RawMessage
}
type UpdateDualLlmConfig500Error0 = string
type UpdateDualLlmConfig500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type UpdateDualLlmConfig_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r UpdateDualLlmConfigResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateDualLlmConfigResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDualLlmResultsByInteractionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		AgentId       openapi_types.UUID                               `json:"agentId"`
		Conversations GetDualLlmResultsByInteraction_200_Conversations `json:"conversations"`
		CreatedAt     time.Time                                        `json:"createdAt"`
		Id            openapi_types.UUID                               `json:"id"`
		Result        string                                           `json:"result"`
		ToolCallId    string                                           `json:"toolCallId"`
	}
	JSON401 *struct {
		Error GetDualLlmResultsByInteraction_401_Error `json:"error"`
	}
	JSON404 *struct {
		Error GetDualLlmResultsByInteraction_404_Error `json:"error"`
	}
	JSON500 *struct {
		Error GetDualLlmResultsByInteraction_500_Error `json:"error"`
	}
}
type GetDualLlmResultsByInteraction200Conversations0 struct {
	union json.RawMessage
}
type GetDualLlmResultsByInteraction200Conversations00 = string
type GetDualLlmResultsByInteraction200Conversations01 = float32
type GetDualLlmResultsByInteraction200Conversations02 = bool
type GetDualLlmResultsByInteraction200Conversations03 string
type GetDualLlmResultsByInteraction200Conversations1 map[string]interface{}
type GetDualLlmResultsByInteraction200Conversations2 = []interface{}
type GetDualLlmResultsByInteraction_200_Conversations struct {
	union json.RawMessage
}
type GetDualLlmResultsByInteraction401Error0 = string
type GetDualLlmResultsByInteraction401Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetDualLlmResultsByInteraction_401_Error struct {
	union json.RawMessage
}
type GetDualLlmResultsByInteraction404Error0 = string
type GetDualLlmResultsByInteraction404Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetDualLlmResultsByInteraction_404_Error struct {
	union json.RawMessage
}
type GetDualLlmResultsByInteraction500Error0 = string
type GetDualLlmResultsByInteraction500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetDualLlmResultsByInteraction_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r GetDualLlmResultsByInteractionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDualLlmResultsByInteractionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetDualLlmResultByToolCallIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AgentId       openapi_types.UUID                             `json:"agentId"`
		Conversations GetDualLlmResultByToolCallId_200_Conversations `json:"conversations"`
		CreatedAt     time.Time                                      `json:"createdAt"`
		Id            openapi_types.UUID                             `json:"id"`
		Result        string                                         `json:"result"`
		ToolCallId    string                                         `json:"toolCallId"`
	}
	JSON500 *struct {
		Error GetDualLlmResultByToolCallId_500_Error `json:"error"`
	}
}
type GetDualLlmResultByToolCallId200Conversations0 struct {
	union json.RawMessage
}
type GetDualLlmResultByToolCallId200Conversations00 = string
type GetDualLlmResultByToolCallId200Conversations01 = float32
type GetDualLlmResultByToolCallId200Conversations02 = bool
type GetDualLlmResultByToolCallId200Conversations03 string
type GetDualLlmResultByToolCallId200Conversations1 map[string]interface{}
type GetDualLlmResultByToolCallId200Conversations2 = []interface{}
type GetDualLlmResultByToolCallId_200_Conversations struct {
	union json.RawMessage
}
type GetDualLlmResultByToolCallId500Error0 = string
type GetDualLlmResultByToolCallId500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetDualLlmResultByToolCallId_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r GetDualLlmResultByToolCallIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetDualLlmResultByToolCallIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetFeaturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		McpRegistry bool `json:"mcp_registry"`
	}
}

// Status returns HTTPResponse.Status
func (r GetFeaturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetFeaturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInternalMcpCatalogResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		AuthDescription     *string                               `json:"authDescription"`
		AuthFields          *GetInternalMcpCatalog_200_AuthFields `json:"authFields"`
		CreatedAt           time.Time                             `json:"createdAt"`
		Description         *string                               `json:"description"`
		Id                  openapi_types.UUID                    `json:"id"`
		InstallationCommand *string                               `json:"installationCommand"`
		Name                string                                `json:"name"`
		Repository          *string                               `json:"repository"`
		RequiresAuth        bool                                  `json:"requiresAuth"`
		UpdatedAt           time.Time                             `json:"updatedAt"`
		Version             *string                               `json:"version"`
	}
	JSON500 *struct {
		Error GetInternalMcpCatalog_500_Error `json:"error"`
	}
}
type GetInternalMcpCatalog200AuthFields0 struct {
	union json.RawMessage
}
type GetInternalMcpCatalog200AuthFields00 = string
type GetInternalMcpCatalog200AuthFields01 = float32
type GetInternalMcpCatalog200AuthFields02 = bool
type GetInternalMcpCatalog200AuthFields03 string
type GetInternalMcpCatalog200AuthFields1 map[string]interface{}
type GetInternalMcpCatalog200AuthFields2 = []interface{}
type GetInternalMcpCatalog_200_AuthFields struct {
	union json.RawMessage
}
type GetInternalMcpCatalog500Error0 = string
type GetInternalMcpCatalog500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetInternalMcpCatalog_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r GetInternalMcpCatalogResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInternalMcpCatalogResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateInternalMcpCatalogItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AuthDescription     *string                                      `json:"authDescription"`
		AuthFields          *CreateInternalMcpCatalogItem_200_AuthFields `json:"authFields"`
		CreatedAt           time.Time                                    `json:"createdAt"`
		Description         *string                                      `json:"description"`
		Id                  openapi_types.UUID                           `json:"id"`
		InstallationCommand *string                                      `json:"installationCommand"`
		Name                string                                       `json:"name"`
		Repository          *string                                      `json:"repository"`
		RequiresAuth        bool                                         `json:"requiresAuth"`
		UpdatedAt           time.Time                                    `json:"updatedAt"`
		Version             *string                                      `json:"version"`
	}
	JSON500 *struct {
		Error CreateInternalMcpCatalogItem_500_Error `json:"error"`
	}
}
type CreateInternalMcpCatalogItem200AuthFields0 struct {
	union json.RawMessage
}
type CreateInternalMcpCatalogItem200AuthFields00 = string
type CreateInternalMcpCatalogItem200AuthFields01 = float32
type CreateInternalMcpCatalogItem200AuthFields02 = bool
type CreateInternalMcpCatalogItem200AuthFields03 string
type CreateInternalMcpCatalogItem200AuthFields1 map[string]interface{}
type CreateInternalMcpCatalogItem200AuthFields2 = []interface{}
type CreateInternalMcpCatalogItem_200_AuthFields struct {
	union json.RawMessage
}
type CreateInternalMcpCatalogItem500Error0 = string
type CreateInternalMcpCatalogItem500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type CreateInternalMcpCatalogItem_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r CreateInternalMcpCatalogItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateInternalMcpCatalogItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteInternalMcpCatalogItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success bool `json:"success"`
	}
	JSON404 *struct {
		Error DeleteInternalMcpCatalogItem_404_Error `json:"error"`
	}
	JSON500 *struct {
		Error DeleteInternalMcpCatalogItem_500_Error `json:"error"`
	}
}
type DeleteInternalMcpCatalogItem404Error0 = string
type DeleteInternalMcpCatalogItem404Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type DeleteInternalMcpCatalogItem_404_Error struct {
	union json.RawMessage
}
type DeleteInternalMcpCatalogItem500Error0 = string
type DeleteInternalMcpCatalogItem500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type DeleteInternalMcpCatalogItem_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r DeleteInternalMcpCatalogItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteInternalMcpCatalogItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetInternalMcpCatalogItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AuthDescription     *string                                   `json:"authDescription"`
		AuthFields          *GetInternalMcpCatalogItem_200_AuthFields `json:"authFields"`
		CreatedAt           time.Time                                 `json:"createdAt"`
		Description         *string                                   `json:"description"`
		Id                  openapi_types.UUID                        `json:"id"`
		InstallationCommand *string                                   `json:"installationCommand"`
		Name                string                                    `json:"name"`
		Repository          *string                                   `json:"repository"`
		RequiresAuth        bool                                      `json:"requiresAuth"`
		UpdatedAt           time.Time                                 `json:"updatedAt"`
		Version             *string                                   `json:"version"`
	}
	JSON404 *struct {
		Error GetInternalMcpCatalogItem_404_Error `json:"error"`
	}
	JSON500 *struct {
		Error GetInternalMcpCatalogItem_500_Error `json:"error"`
	}
}
type GetInternalMcpCatalogItem200AuthFields0 struct {
	union json.RawMessage
}
type GetInternalMcpCatalogItem200AuthFields00 = string
type GetInternalMcpCatalogItem200AuthFields01 = float32
type GetInternalMcpCatalogItem200AuthFields02 = bool
type GetInternalMcpCatalogItem200AuthFields03 string
type GetInternalMcpCatalogItem200AuthFields1 map[string]interface{}
type GetInternalMcpCatalogItem200AuthFields2 = []interface{}
type GetInternalMcpCatalogItem_200_AuthFields struct {
	union json.RawMessage
}
type GetInternalMcpCatalogItem404Error0 = string
type GetInternalMcpCatalogItem404Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetInternalMcpCatalogItem_404_Error struct {
	union json.RawMessage
}
type GetInternalMcpCatalogItem500Error0 = string
type GetInternalMcpCatalogItem500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetInternalMcpCatalogItem_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r GetInternalMcpCatalogItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetInternalMcpCatalogItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateInternalMcpCatalogItemResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		AuthDescription     *string                                      `json:"authDescription"`
		AuthFields          *UpdateInternalMcpCatalogItem_200_AuthFields `json:"authFields"`
		CreatedAt           time.Time                                    `json:"createdAt"`
		Description         *string                                      `json:"description"`
		Id                  openapi_types.UUID                           `json:"id"`
		InstallationCommand *string                                      `json:"installationCommand"`
		Name                string                                       `json:"name"`
		Repository          *string                                      `json:"repository"`
		RequiresAuth        bool                                         `json:"requiresAuth"`
		UpdatedAt           time.Time                                    `json:"updatedAt"`
		Version             *string                                      `json:"version"`
	}
	JSON404 *struct {
		Error UpdateInternalMcpCatalogItem_404_Error `json:"error"`
	}
	JSON500 *struct {
		Error UpdateInternalMcpCatalogItem_500_Error `json:"error"`
	}
}
type UpdateInternalMcpCatalogItem200AuthFields0 struct {
	union json.RawMessage
}
type UpdateInternalMcpCatalogItem200AuthFields00 = string
type UpdateInternalMcpCatalogItem200AuthFields01 = float32
type UpdateInternalMcpCatalogItem200AuthFields02 = bool
type UpdateInternalMcpCatalogItem200AuthFields03 string
type UpdateInternalMcpCatalogItem200AuthFields1 map[string]interface{}
type UpdateInternalMcpCatalogItem200AuthFields2 = []interface{}
type UpdateInternalMcpCatalogItem_200_AuthFields struct {
	union json.RawMessage
}
type UpdateInternalMcpCatalogItem404Error0 = string
type UpdateInternalMcpCatalogItem404Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type UpdateInternalMcpCatalogItem_404_Error struct {
	union json.RawMessage
}
type UpdateInternalMcpCatalogItem500Error0 = string
type UpdateInternalMcpCatalogItem500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type UpdateInternalMcpCatalogItem_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r UpdateInternalMcpCatalogItemResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateInternalMcpCatalogItemResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMcpServersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		CatalogId *openapi_types.UUID    `json:"catalogId"`
		CreatedAt time.Time              `json:"createdAt"`
		Id        openapi_types.UUID     `json:"id"`
		Metadata  map[string]interface{} `json:"metadata"`
		Name      string                 `json:"name"`
		Teams     *[]string              `json:"teams,omitempty"`
		UpdatedAt time.Time              `json:"updatedAt"`
	}
	JSON401 *struct {
		Error GetMcpServers_401_Error `json:"error"`
	}
	JSON500 *struct {
		Error GetMcpServers_500_Error `json:"error"`
	}
}
type GetMcpServers401Error0 = string
type GetMcpServers401Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetMcpServers_401_Error struct {
	union json.RawMessage
}
type GetMcpServers500Error0 = string
type GetMcpServers500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetMcpServers_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r GetMcpServersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMcpServersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type InstallMcpServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CatalogId *openapi_types.UUID    `json:"catalogId"`
		CreatedAt time.Time              `json:"createdAt"`
		Id        openapi_types.UUID     `json:"id"`
		Metadata  map[string]interface{} `json:"metadata"`
		Name      string                 `json:"name"`
		Teams     *[]string              `json:"teams,omitempty"`
		UpdatedAt time.Time              `json:"updatedAt"`
	}
	JSON400 *struct {
		Error InstallMcpServer_400_Error `json:"error"`
	}
	JSON500 *struct {
		Error InstallMcpServer_500_Error `json:"error"`
	}
}
type InstallMcpServer400Error0 = string
type InstallMcpServer400Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type InstallMcpServer_400_Error struct {
	union json.RawMessage
}
type InstallMcpServer500Error0 = string
type InstallMcpServer500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type InstallMcpServer_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r InstallMcpServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r InstallMcpServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMcpServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success bool `json:"success"`
	}
	JSON404 *struct {
		Error DeleteMcpServer_404_Error `json:"error"`
	}
	JSON500 *struct {
		Error DeleteMcpServer_500_Error `json:"error"`
	}
}
type DeleteMcpServer404Error0 = string
type DeleteMcpServer404Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type DeleteMcpServer_404_Error struct {
	union json.RawMessage
}
type DeleteMcpServer500Error0 = string
type DeleteMcpServer500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type DeleteMcpServer_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r DeleteMcpServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMcpServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMcpServerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CatalogId *openapi_types.UUID    `json:"catalogId"`
		CreatedAt time.Time              `json:"createdAt"`
		Id        openapi_types.UUID     `json:"id"`
		Metadata  map[string]interface{} `json:"metadata"`
		Name      string                 `json:"name"`
		Teams     *[]string              `json:"teams,omitempty"`
		UpdatedAt time.Time              `json:"updatedAt"`
	}
	JSON401 *struct {
		Error GetMcpServer_401_Error `json:"error"`
	}
	JSON404 *struct {
		Error GetMcpServer_404_Error `json:"error"`
	}
	JSON500 *struct {
		Error GetMcpServer_500_Error `json:"error"`
	}
}
type GetMcpServer401Error0 = string
type GetMcpServer401Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetMcpServer_401_Error struct {
	union json.RawMessage
}
type GetMcpServer404Error0 = string
type GetMcpServer404Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetMcpServer_404_Error struct {
	union json.RawMessage
}
type GetMcpServer500Error0 = string
type GetMcpServer500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetMcpServer_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r GetMcpServerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMcpServerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		CreatedAt   time.Time `json:"createdAt"`
		CreatedBy   string    `json:"createdBy"`
		Description *string   `json:"description"`
		Id          string    `json:"id"`
		Members     *[]struct {
			CreatedAt time.Time `json:"createdAt"`
			Id        string    `json:"id"`
			Role      string    `json:"role"`
			TeamId    string    `json:"teamId"`
			UserId    string    `json:"userId"`
		} `json:"members,omitempty"`
		Name           string    `json:"name"`
		OrganizationId string    `json:"organizationId"`
		UpdatedAt      time.Time `json:"updatedAt"`
	}
	JSON401 *struct {
		Error GetTeams_401_Error `json:"error"`
	}
	JSON500 *struct {
		Error GetTeams_500_Error `json:"error"`
	}
}
type GetTeams401Error0 = string
type GetTeams401Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetTeams_401_Error struct {
	union json.RawMessage
}
type GetTeams500Error0 = string
type GetTeams500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetTeams_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r GetTeamsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedAt   time.Time `json:"createdAt"`
		CreatedBy   string    `json:"createdBy"`
		Description *string   `json:"description"`
		Id          string    `json:"id"`
		Members     *[]struct {
			CreatedAt time.Time `json:"createdAt"`
			Id        string    `json:"id"`
			Role      string    `json:"role"`
			TeamId    string    `json:"teamId"`
			UserId    string    `json:"userId"`
		} `json:"members,omitempty"`
		Name           string    `json:"name"`
		OrganizationId string    `json:"organizationId"`
		UpdatedAt      time.Time `json:"updatedAt"`
	}
	JSON401 *struct {
		Error CreateTeam_401_Error `json:"error"`
	}
	JSON403 *struct {
		Error CreateTeam_403_Error `json:"error"`
	}
	JSON500 *struct {
		Error CreateTeam_500_Error `json:"error"`
	}
}
type CreateTeam401Error0 = string
type CreateTeam401Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type CreateTeam_401_Error struct {
	union json.RawMessage
}
type CreateTeam403Error0 = string
type CreateTeam403Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type CreateTeam_403_Error struct {
	union json.RawMessage
}
type CreateTeam500Error0 = string
type CreateTeam500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type CreateTeam_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r CreateTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success bool `json:"success"`
	}
	JSON401 *struct {
		Error DeleteTeam_401_Error `json:"error"`
	}
	JSON403 *struct {
		Error DeleteTeam_403_Error `json:"error"`
	}
	JSON404 *struct {
		Error DeleteTeam_404_Error `json:"error"`
	}
	JSON500 *struct {
		Error DeleteTeam_500_Error `json:"error"`
	}
}
type DeleteTeam401Error0 = string
type DeleteTeam401Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type DeleteTeam_401_Error struct {
	union json.RawMessage
}
type DeleteTeam403Error0 = string
type DeleteTeam403Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type DeleteTeam_403_Error struct {
	union json.RawMessage
}
type DeleteTeam404Error0 = string
type DeleteTeam404Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type DeleteTeam_404_Error struct {
	union json.RawMessage
}
type DeleteTeam500Error0 = string
type DeleteTeam500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type DeleteTeam_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r DeleteTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedAt   time.Time `json:"createdAt"`
		CreatedBy   string    `json:"createdBy"`
		Description *string   `json:"description"`
		Id          string    `json:"id"`
		Members     *[]struct {
			CreatedAt time.Time `json:"createdAt"`
			Id        string    `json:"id"`
			Role      string    `json:"role"`
			TeamId    string    `json:"teamId"`
			UserId    string    `json:"userId"`
		} `json:"members,omitempty"`
		Name           string    `json:"name"`
		OrganizationId string    `json:"organizationId"`
		UpdatedAt      time.Time `json:"updatedAt"`
	}
	JSON401 *struct {
		Error GetTeam_401_Error `json:"error"`
	}
	JSON404 *struct {
		Error GetTeam_404_Error `json:"error"`
	}
	JSON500 *struct {
		Error GetTeam_500_Error `json:"error"`
	}
}
type GetTeam401Error0 = string
type GetTeam401Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetTeam_401_Error struct {
	union json.RawMessage
}
type GetTeam404Error0 = string
type GetTeam404Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetTeam_404_Error struct {
	union json.RawMessage
}
type GetTeam500Error0 = string
type GetTeam500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetTeam_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r GetTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTeamResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedAt   time.Time `json:"createdAt"`
		CreatedBy   string    `json:"createdBy"`
		Description *string   `json:"description"`
		Id          string    `json:"id"`
		Members     *[]struct {
			CreatedAt time.Time `json:"createdAt"`
			Id        string    `json:"id"`
			Role      string    `json:"role"`
			TeamId    string    `json:"teamId"`
			UserId    string    `json:"userId"`
		} `json:"members,omitempty"`
		Name           string    `json:"name"`
		OrganizationId string    `json:"organizationId"`
		UpdatedAt      time.Time `json:"updatedAt"`
	}
	JSON401 *struct {
		Error UpdateTeam_401_Error `json:"error"`
	}
	JSON403 *struct {
		Error UpdateTeam_403_Error `json:"error"`
	}
	JSON404 *struct {
		Error UpdateTeam_404_Error `json:"error"`
	}
	JSON500 *struct {
		Error UpdateTeam_500_Error `json:"error"`
	}
}
type UpdateTeam401Error0 = string
type UpdateTeam401Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type UpdateTeam_401_Error struct {
	union json.RawMessage
}
type UpdateTeam403Error0 = string
type UpdateTeam403Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type UpdateTeam_403_Error struct {
	union json.RawMessage
}
type UpdateTeam404Error0 = string
type UpdateTeam404Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type UpdateTeam_404_Error struct {
	union json.RawMessage
}
type UpdateTeam500Error0 = string
type UpdateTeam500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type UpdateTeam_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r UpdateTeamResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTeamResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTeamMembersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		CreatedAt time.Time `json:"createdAt"`
		Id        string    `json:"id"`
		Role      string    `json:"role"`
		TeamId    string    `json:"teamId"`
		UserId    string    `json:"userId"`
	}
	JSON401 *struct {
		Error GetTeamMembers_401_Error `json:"error"`
	}
	JSON404 *struct {
		Error GetTeamMembers_404_Error `json:"error"`
	}
	JSON500 *struct {
		Error GetTeamMembers_500_Error `json:"error"`
	}
}
type GetTeamMembers401Error0 = string
type GetTeamMembers401Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetTeamMembers_401_Error struct {
	union json.RawMessage
}
type GetTeamMembers404Error0 = string
type GetTeamMembers404Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetTeamMembers_404_Error struct {
	union json.RawMessage
}
type GetTeamMembers500Error0 = string
type GetTeamMembers500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetTeamMembers_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r GetTeamMembersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTeamMembersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AddTeamMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		CreatedAt time.Time `json:"createdAt"`
		Id        string    `json:"id"`
		Role      string    `json:"role"`
		TeamId    string    `json:"teamId"`
		UserId    string    `json:"userId"`
	}
	JSON401 *struct {
		Error AddTeamMember_401_Error `json:"error"`
	}
	JSON403 *struct {
		Error AddTeamMember_403_Error `json:"error"`
	}
	JSON404 *struct {
		Error AddTeamMember_404_Error `json:"error"`
	}
	JSON500 *struct {
		Error AddTeamMember_500_Error `json:"error"`
	}
}
type AddTeamMember401Error0 = string
type AddTeamMember401Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type AddTeamMember_401_Error struct {
	union json.RawMessage
}
type AddTeamMember403Error0 = string
type AddTeamMember403Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type AddTeamMember_403_Error struct {
	union json.RawMessage
}
type AddTeamMember404Error0 = string
type AddTeamMember404Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type AddTeamMember_404_Error struct {
	union json.RawMessage
}
type AddTeamMember500Error0 = string
type AddTeamMember500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type AddTeamMember_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r AddTeamMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AddTeamMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type RemoveTeamMemberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success bool `json:"success"`
	}
	JSON401 *struct {
		Error RemoveTeamMember_401_Error `json:"error"`
	}
	JSON403 *struct {
		Error RemoveTeamMember_403_Error `json:"error"`
	}
	JSON404 *struct {
		Error RemoveTeamMember_404_Error `json:"error"`
	}
	JSON500 *struct {
		Error RemoveTeamMember_500_Error `json:"error"`
	}
}
type RemoveTeamMember401Error0 = string
type RemoveTeamMember401Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type RemoveTeamMember_401_Error struct {
	union json.RawMessage
}
type RemoveTeamMember403Error0 = string
type RemoveTeamMember403Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type RemoveTeamMember_403_Error struct {
	union json.RawMessage
}
type RemoveTeamMember404Error0 = string
type RemoveTeamMember404Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type RemoveTeamMember_404_Error struct {
	union json.RawMessage
}
type RemoveTeamMember500Error0 = string
type RemoveTeamMember500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type RemoveTeamMember_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r RemoveTeamMemberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r RemoveTeamMemberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetToolsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Agent *struct {
			Id   string `json:"id"`
			Name string `json:"name"`
		} `json:"agent"`
		CreatedAt   time.Time          `json:"createdAt"`
		Description *string            `json:"description"`
		Id          openapi_types.UUID `json:"id"`
		McpServer   *struct {
			Id   string `json:"id"`
			Name string `json:"name"`
		} `json:"mcpServer"`
		Name       string                   `json:"name"`
		Parameters *GetTools_200_Parameters `json:"parameters,omitempty"`
		UpdatedAt  time.Time                `json:"updatedAt"`
	}
	JSON401 *struct {
		Error GetTools_401_Error `json:"error"`
	}
	JSON500 *struct {
		Error GetTools_500_Error `json:"error"`
	}
}
type GetTools200Parameters0 map[string]interface{}
type GetTools_200_Parameters struct {
	union json.RawMessage
}
type GetTools401Error0 = string
type GetTools401Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetTools_401_Error struct {
	union json.RawMessage
}
type GetTools500Error0 = string
type GetTools500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetTools_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r GetToolsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetToolsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUnassignedToolsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Agent *struct {
			Id   string `json:"id"`
			Name string `json:"name"`
		} `json:"agent"`
		CreatedAt   time.Time          `json:"createdAt"`
		Description *string            `json:"description"`
		Id          openapi_types.UUID `json:"id"`
		McpServer   *struct {
			Id   string `json:"id"`
			Name string `json:"name"`
		} `json:"mcpServer"`
		Name       string                             `json:"name"`
		Parameters *GetUnassignedTools_200_Parameters `json:"parameters,omitempty"`
		UpdatedAt  time.Time                          `json:"updatedAt"`
	}
	JSON401 *struct {
		Error GetUnassignedTools_401_Error `json:"error"`
	}
	JSON500 *struct {
		Error GetUnassignedTools_500_Error `json:"error"`
	}
}
type GetUnassignedTools200Parameters0 map[string]interface{}
type GetUnassignedTools_200_Parameters struct {
	union json.RawMessage
}
type GetUnassignedTools401Error0 = string
type GetUnassignedTools401Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetUnassignedTools_401_Error struct {
	union json.RawMessage
}
type GetUnassignedTools500Error0 = string
type GetUnassignedTools500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetUnassignedTools_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r GetUnassignedToolsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUnassignedToolsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTrustedDataPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]struct {
		Action        GetTrustedDataPolicies200Action   `json:"action"`
		AgentToolId   openapi_types.UUID                `json:"agentToolId"`
		AttributePath string                            `json:"attributePath"`
		CreatedAt     time.Time                         `json:"createdAt"`
		Description   string                            `json:"description"`
		Id            openapi_types.UUID                `json:"id"`
		Operator      GetTrustedDataPolicies200Operator `json:"operator"`
		UpdatedAt     time.Time                         `json:"updatedAt"`
		Value         string                            `json:"value"`
	}
	JSON500 *struct {
		Error GetTrustedDataPolicies_500_Error `json:"error"`
	}
}
type GetTrustedDataPolicies200Action string
type GetTrustedDataPolicies200Operator string
type GetTrustedDataPolicies500Error0 = string
type GetTrustedDataPolicies500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetTrustedDataPolicies_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r GetTrustedDataPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTrustedDataPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateTrustedDataPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Action        CreateTrustedDataPolicy200Action   `json:"action"`
		AgentToolId   openapi_types.UUID                 `json:"agentToolId"`
		AttributePath string                             `json:"attributePath"`
		CreatedAt     time.Time                          `json:"createdAt"`
		Description   string                             `json:"description"`
		Id            openapi_types.UUID                 `json:"id"`
		Operator      CreateTrustedDataPolicy200Operator `json:"operator"`
		UpdatedAt     time.Time                          `json:"updatedAt"`
		Value         string                             `json:"value"`
	}
	JSON500 *struct {
		Error CreateTrustedDataPolicy_500_Error `json:"error"`
	}
}
type CreateTrustedDataPolicy200Action string
type CreateTrustedDataPolicy200Operator string
type CreateTrustedDataPolicy500Error0 = string
type CreateTrustedDataPolicy500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type CreateTrustedDataPolicy_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r CreateTrustedDataPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateTrustedDataPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTrustedDataPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Success bool `json:"success"`
	}
	JSON404 *struct {
		Error DeleteTrustedDataPolicy_404_Error `json:"error"`
	}
	JSON500 *struct {
		Error DeleteTrustedDataPolicy_500_Error `json:"error"`
	}
}
type DeleteTrustedDataPolicy404Error0 = string
type DeleteTrustedDataPolicy404Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type DeleteTrustedDataPolicy_404_Error struct {
	union json.RawMessage
}
type DeleteTrustedDataPolicy500Error0 = string
type DeleteTrustedDataPolicy500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type DeleteTrustedDataPolicy_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r DeleteTrustedDataPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTrustedDataPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTrustedDataPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Action        GetTrustedDataPolicy200Action   `json:"action"`
		AgentToolId   openapi_types.UUID              `json:"agentToolId"`
		AttributePath string                          `json:"attributePath"`
		CreatedAt     time.Time                       `json:"createdAt"`
		Description   string                          `json:"description"`
		Id            openapi_types.UUID              `json:"id"`
		Operator      GetTrustedDataPolicy200Operator `json:"operator"`
		UpdatedAt     time.Time                       `json:"updatedAt"`
		Value         string                          `json:"value"`
	}
	JSON404 *struct {
		Error GetTrustedDataPolicy_404_Error `json:"error"`
	}
	JSON500 *struct {
		Error GetTrustedDataPolicy_500_Error `json:"error"`
	}
}
type GetTrustedDataPolicy200Action string
type GetTrustedDataPolicy200Operator string
type GetTrustedDataPolicy404Error0 = string
type GetTrustedDataPolicy404Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetTrustedDataPolicy_404_Error struct {
	union json.RawMessage
}
type GetTrustedDataPolicy500Error0 = string
type GetTrustedDataPolicy500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type GetTrustedDataPolicy_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r GetTrustedDataPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTrustedDataPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type UpdateTrustedDataPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Action        UpdateTrustedDataPolicy200Action   `json:"action"`
		AgentToolId   openapi_types.UUID                 `json:"agentToolId"`
		AttributePath string                             `json:"attributePath"`
		CreatedAt     time.Time                          `json:"createdAt"`
		Description   string                             `json:"description"`
		Id            openapi_types.UUID                 `json:"id"`
		Operator      UpdateTrustedDataPolicy200Operator `json:"operator"`
		UpdatedAt     time.Time                          `json:"updatedAt"`
		Value         string                             `json:"value"`
	}
	JSON404 *struct {
		Error UpdateTrustedDataPolicy_404_Error `json:"error"`
	}
	JSON500 *struct {
		Error UpdateTrustedDataPolicy_500_Error `json:"error"`
	}
}
type UpdateTrustedDataPolicy200Action string
type UpdateTrustedDataPolicy200Operator string
type UpdateTrustedDataPolicy404Error0 = string
type UpdateTrustedDataPolicy404Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type UpdateTrustedDataPolicy_404_Error struct {
	union json.RawMessage
}
type UpdateTrustedDataPolicy500Error0 = string
type UpdateTrustedDataPolicy500Error1 struct {
	Message string `json:"message"`
	Type    string `json:"type"`
}
type UpdateTrustedDataPolicy_500_Error struct {
	union json.RawMessage
}

// Status returns HTTPResponse.Status
func (r UpdateTrustedDataPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r UpdateTrustedDataPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetHealthResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *struct {
		Name    string `json:"name"`
		Status  string `json:"status"`
		Version string `json:"version"`
	}
}

// Status returns HTTPResponse.Status
func (r GetHealthResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetHealthResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAllAgentToolsWithResponse request returning *GetAllAgentToolsResponse
func (c *ClientWithResponses) GetAllAgentToolsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAllAgentToolsResponse, error) {
	rsp, err := c.GetAllAgentTools(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllAgentToolsResponse(rsp)
}

// UpdateAgentToolWithBodyWithResponse request with arbitrary body returning *UpdateAgentToolResponse
func (c *ClientWithResponses) UpdateAgentToolWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAgentToolResponse, error) {
	rsp, err := c.UpdateAgentToolWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAgentToolResponse(rsp)
}

func (c *ClientWithResponses) UpdateAgentToolWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateAgentToolJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAgentToolResponse, error) {
	rsp, err := c.UpdateAgentTool(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAgentToolResponse(rsp)
}

// GetAgentsWithResponse request returning *GetAgentsResponse
func (c *ClientWithResponses) GetAgentsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetAgentsResponse, error) {
	rsp, err := c.GetAgents(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAgentsResponse(rsp)
}

// CreateAgentWithBodyWithResponse request with arbitrary body returning *CreateAgentResponse
func (c *ClientWithResponses) CreateAgentWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAgentResponse, error) {
	rsp, err := c.CreateAgentWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAgentResponse(rsp)
}

func (c *ClientWithResponses) CreateAgentWithResponse(ctx context.Context, body CreateAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAgentResponse, error) {
	rsp, err := c.CreateAgent(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAgentResponse(rsp)
}

// GetDefaultAgentWithResponse request returning *GetDefaultAgentResponse
func (c *ClientWithResponses) GetDefaultAgentWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDefaultAgentResponse, error) {
	rsp, err := c.GetDefaultAgent(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDefaultAgentResponse(rsp)
}

// GetAgentToolsWithResponse request returning *GetAgentToolsResponse
func (c *ClientWithResponses) GetAgentToolsWithResponse(ctx context.Context, agentId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetAgentToolsResponse, error) {
	rsp, err := c.GetAgentTools(ctx, agentId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAgentToolsResponse(rsp)
}

// UnassignToolFromAgentWithResponse request returning *UnassignToolFromAgentResponse
func (c *ClientWithResponses) UnassignToolFromAgentWithResponse(ctx context.Context, agentId openapi_types.UUID, toolId openapi_types.UUID, reqEditors ...RequestEditorFn) (*UnassignToolFromAgentResponse, error) {
	rsp, err := c.UnassignToolFromAgent(ctx, agentId, toolId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUnassignToolFromAgentResponse(rsp)
}

// AssignToolToAgentWithResponse request returning *AssignToolToAgentResponse
func (c *ClientWithResponses) AssignToolToAgentWithResponse(ctx context.Context, agentId openapi_types.UUID, toolId openapi_types.UUID, reqEditors ...RequestEditorFn) (*AssignToolToAgentResponse, error) {
	rsp, err := c.AssignToolToAgent(ctx, agentId, toolId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAssignToolToAgentResponse(rsp)
}

// DeleteAgentWithResponse request returning *DeleteAgentResponse
func (c *ClientWithResponses) DeleteAgentWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteAgentResponse, error) {
	rsp, err := c.DeleteAgent(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteAgentResponse(rsp)
}

// GetAgentWithResponse request returning *GetAgentResponse
func (c *ClientWithResponses) GetAgentWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetAgentResponse, error) {
	rsp, err := c.GetAgent(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAgentResponse(rsp)
}

// UpdateAgentWithBodyWithResponse request with arbitrary body returning *UpdateAgentResponse
func (c *ClientWithResponses) UpdateAgentWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateAgentResponse, error) {
	rsp, err := c.UpdateAgentWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAgentResponse(rsp)
}

func (c *ClientWithResponses) UpdateAgentWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateAgentJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateAgentResponse, error) {
	rsp, err := c.UpdateAgent(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateAgentResponse(rsp)
}

// GetOperatorsWithResponse request returning *GetOperatorsResponse
func (c *ClientWithResponses) GetOperatorsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetOperatorsResponse, error) {
	rsp, err := c.GetOperators(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetOperatorsResponse(rsp)
}

// GetToolInvocationPoliciesWithResponse request returning *GetToolInvocationPoliciesResponse
func (c *ClientWithResponses) GetToolInvocationPoliciesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetToolInvocationPoliciesResponse, error) {
	rsp, err := c.GetToolInvocationPolicies(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetToolInvocationPoliciesResponse(rsp)
}

// CreateToolInvocationPolicyWithBodyWithResponse request with arbitrary body returning *CreateToolInvocationPolicyResponse
func (c *ClientWithResponses) CreateToolInvocationPolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateToolInvocationPolicyResponse, error) {
	rsp, err := c.CreateToolInvocationPolicyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateToolInvocationPolicyResponse(rsp)
}

func (c *ClientWithResponses) CreateToolInvocationPolicyWithResponse(ctx context.Context, body CreateToolInvocationPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateToolInvocationPolicyResponse, error) {
	rsp, err := c.CreateToolInvocationPolicy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateToolInvocationPolicyResponse(rsp)
}

// DeleteToolInvocationPolicyWithResponse request returning *DeleteToolInvocationPolicyResponse
func (c *ClientWithResponses) DeleteToolInvocationPolicyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteToolInvocationPolicyResponse, error) {
	rsp, err := c.DeleteToolInvocationPolicy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteToolInvocationPolicyResponse(rsp)
}

// GetToolInvocationPolicyWithResponse request returning *GetToolInvocationPolicyResponse
func (c *ClientWithResponses) GetToolInvocationPolicyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetToolInvocationPolicyResponse, error) {
	rsp, err := c.GetToolInvocationPolicy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetToolInvocationPolicyResponse(rsp)
}

// UpdateToolInvocationPolicyWithBodyWithResponse request with arbitrary body returning *UpdateToolInvocationPolicyResponse
func (c *ClientWithResponses) UpdateToolInvocationPolicyWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateToolInvocationPolicyResponse, error) {
	rsp, err := c.UpdateToolInvocationPolicyWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateToolInvocationPolicyResponse(rsp)
}

func (c *ClientWithResponses) UpdateToolInvocationPolicyWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateToolInvocationPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateToolInvocationPolicyResponse, error) {
	rsp, err := c.UpdateToolInvocationPolicy(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateToolInvocationPolicyResponse(rsp)
}

// GetDualLlmConfigsWithResponse request returning *GetDualLlmConfigsResponse
func (c *ClientWithResponses) GetDualLlmConfigsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDualLlmConfigsResponse, error) {
	rsp, err := c.GetDualLlmConfigs(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDualLlmConfigsResponse(rsp)
}

// CreateDualLlmConfigWithBodyWithResponse request with arbitrary body returning *CreateDualLlmConfigResponse
func (c *ClientWithResponses) CreateDualLlmConfigWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateDualLlmConfigResponse, error) {
	rsp, err := c.CreateDualLlmConfigWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDualLlmConfigResponse(rsp)
}

func (c *ClientWithResponses) CreateDualLlmConfigWithResponse(ctx context.Context, body CreateDualLlmConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateDualLlmConfigResponse, error) {
	rsp, err := c.CreateDualLlmConfig(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateDualLlmConfigResponse(rsp)
}

// GetDefaultDualLlmConfigWithResponse request returning *GetDefaultDualLlmConfigResponse
func (c *ClientWithResponses) GetDefaultDualLlmConfigWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetDefaultDualLlmConfigResponse, error) {
	rsp, err := c.GetDefaultDualLlmConfig(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDefaultDualLlmConfigResponse(rsp)
}

// DeleteDualLlmConfigWithResponse request returning *DeleteDualLlmConfigResponse
func (c *ClientWithResponses) DeleteDualLlmConfigWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteDualLlmConfigResponse, error) {
	rsp, err := c.DeleteDualLlmConfig(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteDualLlmConfigResponse(rsp)
}

// GetDualLlmConfigWithResponse request returning *GetDualLlmConfigResponse
func (c *ClientWithResponses) GetDualLlmConfigWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetDualLlmConfigResponse, error) {
	rsp, err := c.GetDualLlmConfig(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDualLlmConfigResponse(rsp)
}

// UpdateDualLlmConfigWithBodyWithResponse request with arbitrary body returning *UpdateDualLlmConfigResponse
func (c *ClientWithResponses) UpdateDualLlmConfigWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateDualLlmConfigResponse, error) {
	rsp, err := c.UpdateDualLlmConfigWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDualLlmConfigResponse(rsp)
}

func (c *ClientWithResponses) UpdateDualLlmConfigWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateDualLlmConfigJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateDualLlmConfigResponse, error) {
	rsp, err := c.UpdateDualLlmConfig(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateDualLlmConfigResponse(rsp)
}

// GetDualLlmResultsByInteractionWithResponse request returning *GetDualLlmResultsByInteractionResponse
func (c *ClientWithResponses) GetDualLlmResultsByInteractionWithResponse(ctx context.Context, interactionId openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetDualLlmResultsByInteractionResponse, error) {
	rsp, err := c.GetDualLlmResultsByInteraction(ctx, interactionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDualLlmResultsByInteractionResponse(rsp)
}

// GetDualLlmResultByToolCallIdWithResponse request returning *GetDualLlmResultByToolCallIdResponse
func (c *ClientWithResponses) GetDualLlmResultByToolCallIdWithResponse(ctx context.Context, toolCallId string, reqEditors ...RequestEditorFn) (*GetDualLlmResultByToolCallIdResponse, error) {
	rsp, err := c.GetDualLlmResultByToolCallId(ctx, toolCallId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetDualLlmResultByToolCallIdResponse(rsp)
}

// GetFeaturesWithResponse request returning *GetFeaturesResponse
func (c *ClientWithResponses) GetFeaturesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetFeaturesResponse, error) {
	rsp, err := c.GetFeatures(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetFeaturesResponse(rsp)
}

// GetInternalMcpCatalogWithResponse request returning *GetInternalMcpCatalogResponse
func (c *ClientWithResponses) GetInternalMcpCatalogWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetInternalMcpCatalogResponse, error) {
	rsp, err := c.GetInternalMcpCatalog(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInternalMcpCatalogResponse(rsp)
}

// CreateInternalMcpCatalogItemWithBodyWithResponse request with arbitrary body returning *CreateInternalMcpCatalogItemResponse
func (c *ClientWithResponses) CreateInternalMcpCatalogItemWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateInternalMcpCatalogItemResponse, error) {
	rsp, err := c.CreateInternalMcpCatalogItemWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateInternalMcpCatalogItemResponse(rsp)
}

func (c *ClientWithResponses) CreateInternalMcpCatalogItemWithResponse(ctx context.Context, body CreateInternalMcpCatalogItemJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateInternalMcpCatalogItemResponse, error) {
	rsp, err := c.CreateInternalMcpCatalogItem(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateInternalMcpCatalogItemResponse(rsp)
}

// DeleteInternalMcpCatalogItemWithResponse request returning *DeleteInternalMcpCatalogItemResponse
func (c *ClientWithResponses) DeleteInternalMcpCatalogItemWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteInternalMcpCatalogItemResponse, error) {
	rsp, err := c.DeleteInternalMcpCatalogItem(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteInternalMcpCatalogItemResponse(rsp)
}

// GetInternalMcpCatalogItemWithResponse request returning *GetInternalMcpCatalogItemResponse
func (c *ClientWithResponses) GetInternalMcpCatalogItemWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetInternalMcpCatalogItemResponse, error) {
	rsp, err := c.GetInternalMcpCatalogItem(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetInternalMcpCatalogItemResponse(rsp)
}

// UpdateInternalMcpCatalogItemWithBodyWithResponse request with arbitrary body returning *UpdateInternalMcpCatalogItemResponse
func (c *ClientWithResponses) UpdateInternalMcpCatalogItemWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateInternalMcpCatalogItemResponse, error) {
	rsp, err := c.UpdateInternalMcpCatalogItemWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateInternalMcpCatalogItemResponse(rsp)
}

func (c *ClientWithResponses) UpdateInternalMcpCatalogItemWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateInternalMcpCatalogItemJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateInternalMcpCatalogItemResponse, error) {
	rsp, err := c.UpdateInternalMcpCatalogItem(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateInternalMcpCatalogItemResponse(rsp)
}

// GetMcpServersWithResponse request returning *GetMcpServersResponse
func (c *ClientWithResponses) GetMcpServersWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetMcpServersResponse, error) {
	rsp, err := c.GetMcpServers(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMcpServersResponse(rsp)
}

// InstallMcpServerWithBodyWithResponse request with arbitrary body returning *InstallMcpServerResponse
func (c *ClientWithResponses) InstallMcpServerWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*InstallMcpServerResponse, error) {
	rsp, err := c.InstallMcpServerWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInstallMcpServerResponse(rsp)
}

func (c *ClientWithResponses) InstallMcpServerWithResponse(ctx context.Context, body InstallMcpServerJSONRequestBody, reqEditors ...RequestEditorFn) (*InstallMcpServerResponse, error) {
	rsp, err := c.InstallMcpServer(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseInstallMcpServerResponse(rsp)
}

// DeleteMcpServerWithResponse request returning *DeleteMcpServerResponse
func (c *ClientWithResponses) DeleteMcpServerWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteMcpServerResponse, error) {
	rsp, err := c.DeleteMcpServer(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMcpServerResponse(rsp)
}

// GetMcpServerWithResponse request returning *GetMcpServerResponse
func (c *ClientWithResponses) GetMcpServerWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetMcpServerResponse, error) {
	rsp, err := c.GetMcpServer(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMcpServerResponse(rsp)
}

// GetTeamsWithResponse request returning *GetTeamsResponse
func (c *ClientWithResponses) GetTeamsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTeamsResponse, error) {
	rsp, err := c.GetTeams(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamsResponse(rsp)
}

// CreateTeamWithBodyWithResponse request with arbitrary body returning *CreateTeamResponse
func (c *ClientWithResponses) CreateTeamWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error) {
	rsp, err := c.CreateTeamWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamResponse(rsp)
}

func (c *ClientWithResponses) CreateTeamWithResponse(ctx context.Context, body CreateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTeamResponse, error) {
	rsp, err := c.CreateTeam(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTeamResponse(rsp)
}

// DeleteTeamWithResponse request returning *DeleteTeamResponse
func (c *ClientWithResponses) DeleteTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*DeleteTeamResponse, error) {
	rsp, err := c.DeleteTeam(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTeamResponse(rsp)
}

// GetTeamWithResponse request returning *GetTeamResponse
func (c *ClientWithResponses) GetTeamWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTeamResponse, error) {
	rsp, err := c.GetTeam(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamResponse(rsp)
}

// UpdateTeamWithBodyWithResponse request with arbitrary body returning *UpdateTeamResponse
func (c *ClientWithResponses) UpdateTeamWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error) {
	rsp, err := c.UpdateTeamWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamResponse(rsp)
}

func (c *ClientWithResponses) UpdateTeamWithResponse(ctx context.Context, id string, body UpdateTeamJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTeamResponse, error) {
	rsp, err := c.UpdateTeam(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTeamResponse(rsp)
}

// GetTeamMembersWithResponse request returning *GetTeamMembersResponse
func (c *ClientWithResponses) GetTeamMembersWithResponse(ctx context.Context, id string, reqEditors ...RequestEditorFn) (*GetTeamMembersResponse, error) {
	rsp, err := c.GetTeamMembers(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTeamMembersResponse(rsp)
}

// AddTeamMemberWithBodyWithResponse request with arbitrary body returning *AddTeamMemberResponse
func (c *ClientWithResponses) AddTeamMemberWithBodyWithResponse(ctx context.Context, id string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AddTeamMemberResponse, error) {
	rsp, err := c.AddTeamMemberWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddTeamMemberResponse(rsp)
}

func (c *ClientWithResponses) AddTeamMemberWithResponse(ctx context.Context, id string, body AddTeamMemberJSONRequestBody, reqEditors ...RequestEditorFn) (*AddTeamMemberResponse, error) {
	rsp, err := c.AddTeamMember(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAddTeamMemberResponse(rsp)
}

// RemoveTeamMemberWithResponse request returning *RemoveTeamMemberResponse
func (c *ClientWithResponses) RemoveTeamMemberWithResponse(ctx context.Context, id string, userId string, reqEditors ...RequestEditorFn) (*RemoveTeamMemberResponse, error) {
	rsp, err := c.RemoveTeamMember(ctx, id, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseRemoveTeamMemberResponse(rsp)
}

// GetToolsWithResponse request returning *GetToolsResponse
func (c *ClientWithResponses) GetToolsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetToolsResponse, error) {
	rsp, err := c.GetTools(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetToolsResponse(rsp)
}

// GetUnassignedToolsWithResponse request returning *GetUnassignedToolsResponse
func (c *ClientWithResponses) GetUnassignedToolsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetUnassignedToolsResponse, error) {
	rsp, err := c.GetUnassignedTools(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUnassignedToolsResponse(rsp)
}

// GetTrustedDataPoliciesWithResponse request returning *GetTrustedDataPoliciesResponse
func (c *ClientWithResponses) GetTrustedDataPoliciesWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTrustedDataPoliciesResponse, error) {
	rsp, err := c.GetTrustedDataPolicies(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTrustedDataPoliciesResponse(rsp)
}

// CreateTrustedDataPolicyWithBodyWithResponse request with arbitrary body returning *CreateTrustedDataPolicyResponse
func (c *ClientWithResponses) CreateTrustedDataPolicyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateTrustedDataPolicyResponse, error) {
	rsp, err := c.CreateTrustedDataPolicyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTrustedDataPolicyResponse(rsp)
}

func (c *ClientWithResponses) CreateTrustedDataPolicyWithResponse(ctx context.Context, body CreateTrustedDataPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateTrustedDataPolicyResponse, error) {
	rsp, err := c.CreateTrustedDataPolicy(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateTrustedDataPolicyResponse(rsp)
}

// DeleteTrustedDataPolicyWithResponse request returning *DeleteTrustedDataPolicyResponse
func (c *ClientWithResponses) DeleteTrustedDataPolicyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*DeleteTrustedDataPolicyResponse, error) {
	rsp, err := c.DeleteTrustedDataPolicy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTrustedDataPolicyResponse(rsp)
}

// GetTrustedDataPolicyWithResponse request returning *GetTrustedDataPolicyResponse
func (c *ClientWithResponses) GetTrustedDataPolicyWithResponse(ctx context.Context, id openapi_types.UUID, reqEditors ...RequestEditorFn) (*GetTrustedDataPolicyResponse, error) {
	rsp, err := c.GetTrustedDataPolicy(ctx, id, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTrustedDataPolicyResponse(rsp)
}

// UpdateTrustedDataPolicyWithBodyWithResponse request with arbitrary body returning *UpdateTrustedDataPolicyResponse
func (c *ClientWithResponses) UpdateTrustedDataPolicyWithBodyWithResponse(ctx context.Context, id openapi_types.UUID, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*UpdateTrustedDataPolicyResponse, error) {
	rsp, err := c.UpdateTrustedDataPolicyWithBody(ctx, id, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTrustedDataPolicyResponse(rsp)
}

func (c *ClientWithResponses) UpdateTrustedDataPolicyWithResponse(ctx context.Context, id openapi_types.UUID, body UpdateTrustedDataPolicyJSONRequestBody, reqEditors ...RequestEditorFn) (*UpdateTrustedDataPolicyResponse, error) {
	rsp, err := c.UpdateTrustedDataPolicy(ctx, id, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseUpdateTrustedDataPolicyResponse(rsp)
}

// GetHealthWithResponse request returning *GetHealthResponse
func (c *ClientWithResponses) GetHealthWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetHealthResponse, error) {
	rsp, err := c.GetHealth(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetHealthResponse(rsp)
}

// ParseGetAllAgentToolsResponse parses an HTTP response from a GetAllAgentToolsWithResponse call
func ParseGetAllAgentToolsResponse(rsp *http.Response) (*GetAllAgentToolsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllAgentToolsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Agent struct {
				Id   string `json:"id"`
				Name string `json:"name"`
			} `json:"agent"`
			AllowUsageWhenUntrustedDataIsPresent bool               `json:"allowUsageWhenUntrustedDataIsPresent"`
			CreatedAt                            time.Time          `json:"createdAt"`
			Id                                   openapi_types.UUID `json:"id"`
			ResponseModifierTemplate             *string            `json:"responseModifierTemplate"`
			Tool                                 struct {
				CreatedAt     time.Time                             `json:"createdAt"`
				Description   *string                               `json:"description"`
				Id            string                                `json:"id"`
				McpServerId   *string                               `json:"mcpServerId"`
				McpServerName *string                               `json:"mcpServerName"`
				Name          string                                `json:"name"`
				Parameters    *GetAllAgentTools_200_Tool_Parameters `json:"parameters,omitempty"`
				UpdatedAt     time.Time                             `json:"updatedAt"`
			} `json:"tool"`
			ToolResultTreatment GetAllAgentTools200ToolResultTreatment `json:"toolResultTreatment"`
			UpdatedAt           time.Time                              `json:"updatedAt"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error GetAllAgentTools_401_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error GetAllAgentTools_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateAgentToolResponse parses an HTTP response from a UpdateAgentToolWithResponse call
func ParseUpdateAgentToolResponse(rsp *http.Response) (*UpdateAgentToolResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAgentToolResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AgentId                              *openapi_types.UUID                   `json:"agentId,omitempty"`
			AllowUsageWhenUntrustedDataIsPresent *bool                                 `json:"allowUsageWhenUntrustedDataIsPresent,omitempty"`
			CreatedAt                            *time.Time                            `json:"createdAt,omitempty"`
			Id                                   *openapi_types.UUID                   `json:"id,omitempty"`
			ResponseModifierTemplate             *string                               `json:"responseModifierTemplate"`
			ToolId                               *openapi_types.UUID                   `json:"toolId,omitempty"`
			ToolResultTreatment                  UpdateAgentTool200ToolResultTreatment `json:"toolResultTreatment"`
			UpdatedAt                            *time.Time                            `json:"updatedAt,omitempty"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error UpdateAgentTool_404_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error UpdateAgentTool_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAgentsResponse parses an HTTP response from a GetAgentsWithResponse call
func ParseGetAgentsResponse(rsp *http.Response) (*GetAgentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAgentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			CreatedAt time.Time          `json:"createdAt"`
			Id        openapi_types.UUID `json:"id"`
			IsDefault bool               `json:"isDefault"`
			IsDemo    bool               `json:"isDemo"`
			Name      string             `json:"name"`
			Teams     []string           `json:"teams"`
			Tools     []struct {
				AgentId     *openapi_types.UUID             `json:"agentId"`
				CreatedAt   time.Time                       `json:"createdAt"`
				Description *string                         `json:"description"`
				Id          openapi_types.UUID              `json:"id"`
				McpServerId *openapi_types.UUID             `json:"mcpServerId"`
				Name        string                          `json:"name"`
				Parameters  *GetAgents_200_Tools_Parameters `json:"parameters,omitempty"`
				UpdatedAt   time.Time                       `json:"updatedAt"`
			} `json:"tools"`
			UpdatedAt time.Time `json:"updatedAt"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error GetAgents_401_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error GetAgents_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateAgentResponse parses an HTTP response from a CreateAgentWithResponse call
func ParseCreateAgentResponse(rsp *http.Response) (*CreateAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedAt time.Time          `json:"createdAt"`
			Id        openapi_types.UUID `json:"id"`
			IsDefault bool               `json:"isDefault"`
			IsDemo    bool               `json:"isDemo"`
			Name      string             `json:"name"`
			Teams     []string           `json:"teams"`
			Tools     []struct {
				AgentId     *openapi_types.UUID               `json:"agentId"`
				CreatedAt   time.Time                         `json:"createdAt"`
				Description *string                           `json:"description"`
				Id          openapi_types.UUID                `json:"id"`
				McpServerId *openapi_types.UUID               `json:"mcpServerId"`
				Name        string                            `json:"name"`
				Parameters  *CreateAgent_200_Tools_Parameters `json:"parameters,omitempty"`
				UpdatedAt   time.Time                         `json:"updatedAt"`
			} `json:"tools"`
			UpdatedAt time.Time `json:"updatedAt"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error CreateAgent_401_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error CreateAgent_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDefaultAgentResponse parses an HTTP response from a GetDefaultAgentWithResponse call
func ParseGetDefaultAgentResponse(rsp *http.Response) (*GetDefaultAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDefaultAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedAt time.Time          `json:"createdAt"`
			Id        openapi_types.UUID `json:"id"`
			IsDefault bool               `json:"isDefault"`
			IsDemo    bool               `json:"isDemo"`
			Name      string             `json:"name"`
			Teams     []string           `json:"teams"`
			Tools     []struct {
				AgentId     *openapi_types.UUID                   `json:"agentId"`
				CreatedAt   time.Time                             `json:"createdAt"`
				Description *string                               `json:"description"`
				Id          openapi_types.UUID                    `json:"id"`
				McpServerId *openapi_types.UUID                   `json:"mcpServerId"`
				Name        string                                `json:"name"`
				Parameters  *GetDefaultAgent_200_Tools_Parameters `json:"parameters,omitempty"`
				UpdatedAt   time.Time                             `json:"updatedAt"`
			} `json:"tools"`
			UpdatedAt time.Time `json:"updatedAt"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error GetDefaultAgent_401_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error GetDefaultAgent_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAgentToolsResponse parses an HTTP response from a GetAgentToolsWithResponse call
func ParseGetAgentToolsResponse(rsp *http.Response) (*GetAgentToolsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAgentToolsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			AgentId     *openapi_types.UUID           `json:"agentId"`
			CreatedAt   time.Time                     `json:"createdAt"`
			Description *string                       `json:"description"`
			Id          openapi_types.UUID            `json:"id"`
			McpServerId *openapi_types.UUID           `json:"mcpServerId"`
			Name        string                        `json:"name"`
			Parameters  *GetAgentTools_200_Parameters `json:"parameters,omitempty"`
			UpdatedAt   time.Time                     `json:"updatedAt"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error GetAgentTools_404_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error GetAgentTools_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUnassignToolFromAgentResponse parses an HTTP response from a UnassignToolFromAgentWithResponse call
func ParseUnassignToolFromAgentResponse(rsp *http.Response) (*UnassignToolFromAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UnassignToolFromAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success bool `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error UnassignToolFromAgent_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAssignToolToAgentResponse parses an HTTP response from a AssignToolToAgentWithResponse call
func ParseAssignToolToAgentResponse(rsp *http.Response) (*AssignToolToAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AssignToolToAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success bool `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error AssignToolToAgent_404_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error AssignToolToAgent_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteAgentResponse parses an HTTP response from a DeleteAgentWithResponse call
func ParseDeleteAgentResponse(rsp *http.Response) (*DeleteAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success bool `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error DeleteAgent_404_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error DeleteAgent_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetAgentResponse parses an HTTP response from a GetAgentWithResponse call
func ParseGetAgentResponse(rsp *http.Response) (*GetAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedAt time.Time          `json:"createdAt"`
			Id        openapi_types.UUID `json:"id"`
			IsDefault bool               `json:"isDefault"`
			IsDemo    bool               `json:"isDemo"`
			Name      string             `json:"name"`
			Teams     []string           `json:"teams"`
			Tools     []struct {
				AgentId     *openapi_types.UUID            `json:"agentId"`
				CreatedAt   time.Time                      `json:"createdAt"`
				Description *string                        `json:"description"`
				Id          openapi_types.UUID             `json:"id"`
				McpServerId *openapi_types.UUID            `json:"mcpServerId"`
				Name        string                         `json:"name"`
				Parameters  *GetAgent_200_Tools_Parameters `json:"parameters,omitempty"`
				UpdatedAt   time.Time                      `json:"updatedAt"`
			} `json:"tools"`
			UpdatedAt time.Time `json:"updatedAt"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error GetAgent_401_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error GetAgent_404_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error GetAgent_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateAgentResponse parses an HTTP response from a UpdateAgentWithResponse call
func ParseUpdateAgentResponse(rsp *http.Response) (*UpdateAgentResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateAgentResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedAt time.Time          `json:"createdAt"`
			Id        openapi_types.UUID `json:"id"`
			IsDefault bool               `json:"isDefault"`
			IsDemo    bool               `json:"isDemo"`
			Name      string             `json:"name"`
			Teams     []string           `json:"teams"`
			Tools     []struct {
				AgentId     *openapi_types.UUID               `json:"agentId"`
				CreatedAt   time.Time                         `json:"createdAt"`
				Description *string                           `json:"description"`
				Id          openapi_types.UUID                `json:"id"`
				McpServerId *openapi_types.UUID               `json:"mcpServerId"`
				Name        string                            `json:"name"`
				Parameters  *UpdateAgent_200_Tools_Parameters `json:"parameters,omitempty"`
				UpdatedAt   time.Time                         `json:"updatedAt"`
			} `json:"tools"`
			UpdatedAt time.Time `json:"updatedAt"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error UpdateAgent_404_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error UpdateAgent_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetOperatorsResponse parses an HTTP response from a GetOperatorsWithResponse call
func ParseGetOperatorsResponse(rsp *http.Response) (*GetOperatorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetOperatorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Label string               `json:"label"`
			Value GetOperators200Value `json:"value"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetToolInvocationPoliciesResponse parses an HTTP response from a GetToolInvocationPoliciesWithResponse call
func ParseGetToolInvocationPoliciesResponse(rsp *http.Response) (*GetToolInvocationPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetToolInvocationPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Action       GetToolInvocationPolicies200Action   `json:"action"`
			AgentToolId  openapi_types.UUID                   `json:"agentToolId"`
			ArgumentName string                               `json:"argumentName"`
			CreatedAt    time.Time                            `json:"createdAt"`
			Id           openapi_types.UUID                   `json:"id"`
			Operator     GetToolInvocationPolicies200Operator `json:"operator"`
			Reason       *string                              `json:"reason"`
			UpdatedAt    time.Time                            `json:"updatedAt"`
			Value        string                               `json:"value"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error GetToolInvocationPolicies_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateToolInvocationPolicyResponse parses an HTTP response from a CreateToolInvocationPolicyWithResponse call
func ParseCreateToolInvocationPolicyResponse(rsp *http.Response) (*CreateToolInvocationPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateToolInvocationPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Action       CreateToolInvocationPolicy200Action   `json:"action"`
			AgentToolId  openapi_types.UUID                    `json:"agentToolId"`
			ArgumentName string                                `json:"argumentName"`
			CreatedAt    time.Time                             `json:"createdAt"`
			Id           openapi_types.UUID                    `json:"id"`
			Operator     CreateToolInvocationPolicy200Operator `json:"operator"`
			Reason       *string                               `json:"reason"`
			UpdatedAt    time.Time                             `json:"updatedAt"`
			Value        string                                `json:"value"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error CreateToolInvocationPolicy_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteToolInvocationPolicyResponse parses an HTTP response from a DeleteToolInvocationPolicyWithResponse call
func ParseDeleteToolInvocationPolicyResponse(rsp *http.Response) (*DeleteToolInvocationPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteToolInvocationPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success bool `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error DeleteToolInvocationPolicy_404_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error DeleteToolInvocationPolicy_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetToolInvocationPolicyResponse parses an HTTP response from a GetToolInvocationPolicyWithResponse call
func ParseGetToolInvocationPolicyResponse(rsp *http.Response) (*GetToolInvocationPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetToolInvocationPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Action       GetToolInvocationPolicy200Action   `json:"action"`
			AgentToolId  openapi_types.UUID                 `json:"agentToolId"`
			ArgumentName string                             `json:"argumentName"`
			CreatedAt    time.Time                          `json:"createdAt"`
			Id           openapi_types.UUID                 `json:"id"`
			Operator     GetToolInvocationPolicy200Operator `json:"operator"`
			Reason       *string                            `json:"reason"`
			UpdatedAt    time.Time                          `json:"updatedAt"`
			Value        string                             `json:"value"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error GetToolInvocationPolicy_404_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error GetToolInvocationPolicy_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateToolInvocationPolicyResponse parses an HTTP response from a UpdateToolInvocationPolicyWithResponse call
func ParseUpdateToolInvocationPolicyResponse(rsp *http.Response) (*UpdateToolInvocationPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateToolInvocationPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Action       UpdateToolInvocationPolicy200Action   `json:"action"`
			AgentToolId  openapi_types.UUID                    `json:"agentToolId"`
			ArgumentName string                                `json:"argumentName"`
			CreatedAt    time.Time                             `json:"createdAt"`
			Id           openapi_types.UUID                    `json:"id"`
			Operator     UpdateToolInvocationPolicy200Operator `json:"operator"`
			Reason       *string                               `json:"reason"`
			UpdatedAt    time.Time                             `json:"updatedAt"`
			Value        string                                `json:"value"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error UpdateToolInvocationPolicy_404_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error UpdateToolInvocationPolicy_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDualLlmConfigsResponse parses an HTTP response from a GetDualLlmConfigsWithResponse call
func ParseGetDualLlmConfigsResponse(rsp *http.Response) (*GetDualLlmConfigsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDualLlmConfigsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			CreatedAt              time.Time          `json:"createdAt"`
			Enabled                bool               `json:"enabled"`
			Id                     openapi_types.UUID `json:"id"`
			MainAgentPrompt        string             `json:"mainAgentPrompt"`
			MaxRounds              int                `json:"maxRounds"`
			QuarantinedAgentPrompt string             `json:"quarantinedAgentPrompt"`
			SummaryPrompt          string             `json:"summaryPrompt"`
			UpdatedAt              time.Time          `json:"updatedAt"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error GetDualLlmConfigs_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateDualLlmConfigResponse parses an HTTP response from a CreateDualLlmConfigWithResponse call
func ParseCreateDualLlmConfigResponse(rsp *http.Response) (*CreateDualLlmConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateDualLlmConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedAt              time.Time          `json:"createdAt"`
			Enabled                bool               `json:"enabled"`
			Id                     openapi_types.UUID `json:"id"`
			MainAgentPrompt        string             `json:"mainAgentPrompt"`
			MaxRounds              int                `json:"maxRounds"`
			QuarantinedAgentPrompt string             `json:"quarantinedAgentPrompt"`
			SummaryPrompt          string             `json:"summaryPrompt"`
			UpdatedAt              time.Time          `json:"updatedAt"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error CreateDualLlmConfig_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDefaultDualLlmConfigResponse parses an HTTP response from a GetDefaultDualLlmConfigWithResponse call
func ParseGetDefaultDualLlmConfigResponse(rsp *http.Response) (*GetDefaultDualLlmConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDefaultDualLlmConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedAt              time.Time          `json:"createdAt"`
			Enabled                bool               `json:"enabled"`
			Id                     openapi_types.UUID `json:"id"`
			MainAgentPrompt        string             `json:"mainAgentPrompt"`
			MaxRounds              int                `json:"maxRounds"`
			QuarantinedAgentPrompt string             `json:"quarantinedAgentPrompt"`
			SummaryPrompt          string             `json:"summaryPrompt"`
			UpdatedAt              time.Time          `json:"updatedAt"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error GetDefaultDualLlmConfig_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteDualLlmConfigResponse parses an HTTP response from a DeleteDualLlmConfigWithResponse call
func ParseDeleteDualLlmConfigResponse(rsp *http.Response) (*DeleteDualLlmConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteDualLlmConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success bool `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error DeleteDualLlmConfig_404_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error DeleteDualLlmConfig_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDualLlmConfigResponse parses an HTTP response from a GetDualLlmConfigWithResponse call
func ParseGetDualLlmConfigResponse(rsp *http.Response) (*GetDualLlmConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDualLlmConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedAt              time.Time          `json:"createdAt"`
			Enabled                bool               `json:"enabled"`
			Id                     openapi_types.UUID `json:"id"`
			MainAgentPrompt        string             `json:"mainAgentPrompt"`
			MaxRounds              int                `json:"maxRounds"`
			QuarantinedAgentPrompt string             `json:"quarantinedAgentPrompt"`
			SummaryPrompt          string             `json:"summaryPrompt"`
			UpdatedAt              time.Time          `json:"updatedAt"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error GetDualLlmConfig_404_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error GetDualLlmConfig_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateDualLlmConfigResponse parses an HTTP response from a UpdateDualLlmConfigWithResponse call
func ParseUpdateDualLlmConfigResponse(rsp *http.Response) (*UpdateDualLlmConfigResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateDualLlmConfigResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedAt              time.Time          `json:"createdAt"`
			Enabled                bool               `json:"enabled"`
			Id                     openapi_types.UUID `json:"id"`
			MainAgentPrompt        string             `json:"mainAgentPrompt"`
			MaxRounds              int                `json:"maxRounds"`
			QuarantinedAgentPrompt string             `json:"quarantinedAgentPrompt"`
			SummaryPrompt          string             `json:"summaryPrompt"`
			UpdatedAt              time.Time          `json:"updatedAt"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error UpdateDualLlmConfig_404_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error UpdateDualLlmConfig_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDualLlmResultsByInteractionResponse parses an HTTP response from a GetDualLlmResultsByInteractionWithResponse call
func ParseGetDualLlmResultsByInteractionResponse(rsp *http.Response) (*GetDualLlmResultsByInteractionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDualLlmResultsByInteractionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			AgentId       openapi_types.UUID                               `json:"agentId"`
			Conversations GetDualLlmResultsByInteraction_200_Conversations `json:"conversations"`
			CreatedAt     time.Time                                        `json:"createdAt"`
			Id            openapi_types.UUID                               `json:"id"`
			Result        string                                           `json:"result"`
			ToolCallId    string                                           `json:"toolCallId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error GetDualLlmResultsByInteraction_401_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error GetDualLlmResultsByInteraction_404_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error GetDualLlmResultsByInteraction_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetDualLlmResultByToolCallIdResponse parses an HTTP response from a GetDualLlmResultByToolCallIdWithResponse call
func ParseGetDualLlmResultByToolCallIdResponse(rsp *http.Response) (*GetDualLlmResultByToolCallIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetDualLlmResultByToolCallIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AgentId       openapi_types.UUID                             `json:"agentId"`
			Conversations GetDualLlmResultByToolCallId_200_Conversations `json:"conversations"`
			CreatedAt     time.Time                                      `json:"createdAt"`
			Id            openapi_types.UUID                             `json:"id"`
			Result        string                                         `json:"result"`
			ToolCallId    string                                         `json:"toolCallId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error GetDualLlmResultByToolCallId_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetFeaturesResponse parses an HTTP response from a GetFeaturesWithResponse call
func ParseGetFeaturesResponse(rsp *http.Response) (*GetFeaturesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetFeaturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			McpRegistry bool `json:"mcp_registry"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseGetInternalMcpCatalogResponse parses an HTTP response from a GetInternalMcpCatalogWithResponse call
func ParseGetInternalMcpCatalogResponse(rsp *http.Response) (*GetInternalMcpCatalogResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInternalMcpCatalogResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			AuthDescription     *string                               `json:"authDescription"`
			AuthFields          *GetInternalMcpCatalog_200_AuthFields `json:"authFields"`
			CreatedAt           time.Time                             `json:"createdAt"`
			Description         *string                               `json:"description"`
			Id                  openapi_types.UUID                    `json:"id"`
			InstallationCommand *string                               `json:"installationCommand"`
			Name                string                                `json:"name"`
			Repository          *string                               `json:"repository"`
			RequiresAuth        bool                                  `json:"requiresAuth"`
			UpdatedAt           time.Time                             `json:"updatedAt"`
			Version             *string                               `json:"version"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error GetInternalMcpCatalog_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateInternalMcpCatalogItemResponse parses an HTTP response from a CreateInternalMcpCatalogItemWithResponse call
func ParseCreateInternalMcpCatalogItemResponse(rsp *http.Response) (*CreateInternalMcpCatalogItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateInternalMcpCatalogItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AuthDescription     *string                                      `json:"authDescription"`
			AuthFields          *CreateInternalMcpCatalogItem_200_AuthFields `json:"authFields"`
			CreatedAt           time.Time                                    `json:"createdAt"`
			Description         *string                                      `json:"description"`
			Id                  openapi_types.UUID                           `json:"id"`
			InstallationCommand *string                                      `json:"installationCommand"`
			Name                string                                       `json:"name"`
			Repository          *string                                      `json:"repository"`
			RequiresAuth        bool                                         `json:"requiresAuth"`
			UpdatedAt           time.Time                                    `json:"updatedAt"`
			Version             *string                                      `json:"version"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error CreateInternalMcpCatalogItem_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteInternalMcpCatalogItemResponse parses an HTTP response from a DeleteInternalMcpCatalogItemWithResponse call
func ParseDeleteInternalMcpCatalogItemResponse(rsp *http.Response) (*DeleteInternalMcpCatalogItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteInternalMcpCatalogItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success bool `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error DeleteInternalMcpCatalogItem_404_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error DeleteInternalMcpCatalogItem_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetInternalMcpCatalogItemResponse parses an HTTP response from a GetInternalMcpCatalogItemWithResponse call
func ParseGetInternalMcpCatalogItemResponse(rsp *http.Response) (*GetInternalMcpCatalogItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetInternalMcpCatalogItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AuthDescription     *string                                   `json:"authDescription"`
			AuthFields          *GetInternalMcpCatalogItem_200_AuthFields `json:"authFields"`
			CreatedAt           time.Time                                 `json:"createdAt"`
			Description         *string                                   `json:"description"`
			Id                  openapi_types.UUID                        `json:"id"`
			InstallationCommand *string                                   `json:"installationCommand"`
			Name                string                                    `json:"name"`
			Repository          *string                                   `json:"repository"`
			RequiresAuth        bool                                      `json:"requiresAuth"`
			UpdatedAt           time.Time                                 `json:"updatedAt"`
			Version             *string                                   `json:"version"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error GetInternalMcpCatalogItem_404_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error GetInternalMcpCatalogItem_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateInternalMcpCatalogItemResponse parses an HTTP response from a UpdateInternalMcpCatalogItemWithResponse call
func ParseUpdateInternalMcpCatalogItemResponse(rsp *http.Response) (*UpdateInternalMcpCatalogItemResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateInternalMcpCatalogItemResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			AuthDescription     *string                                      `json:"authDescription"`
			AuthFields          *UpdateInternalMcpCatalogItem_200_AuthFields `json:"authFields"`
			CreatedAt           time.Time                                    `json:"createdAt"`
			Description         *string                                      `json:"description"`
			Id                  openapi_types.UUID                           `json:"id"`
			InstallationCommand *string                                      `json:"installationCommand"`
			Name                string                                       `json:"name"`
			Repository          *string                                      `json:"repository"`
			RequiresAuth        bool                                         `json:"requiresAuth"`
			UpdatedAt           time.Time                                    `json:"updatedAt"`
			Version             *string                                      `json:"version"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error UpdateInternalMcpCatalogItem_404_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error UpdateInternalMcpCatalogItem_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetMcpServersResponse parses an HTTP response from a GetMcpServersWithResponse call
func ParseGetMcpServersResponse(rsp *http.Response) (*GetMcpServersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMcpServersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			CatalogId *openapi_types.UUID    `json:"catalogId"`
			CreatedAt time.Time              `json:"createdAt"`
			Id        openapi_types.UUID     `json:"id"`
			Metadata  map[string]interface{} `json:"metadata"`
			Name      string                 `json:"name"`
			Teams     *[]string              `json:"teams,omitempty"`
			UpdatedAt time.Time              `json:"updatedAt"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error GetMcpServers_401_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error GetMcpServers_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseInstallMcpServerResponse parses an HTTP response from a InstallMcpServerWithResponse call
func ParseInstallMcpServerResponse(rsp *http.Response) (*InstallMcpServerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &InstallMcpServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CatalogId *openapi_types.UUID    `json:"catalogId"`
			CreatedAt time.Time              `json:"createdAt"`
			Id        openapi_types.UUID     `json:"id"`
			Metadata  map[string]interface{} `json:"metadata"`
			Name      string                 `json:"name"`
			Teams     *[]string              `json:"teams,omitempty"`
			UpdatedAt time.Time              `json:"updatedAt"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest struct {
			Error InstallMcpServer_400_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error InstallMcpServer_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteMcpServerResponse parses an HTTP response from a DeleteMcpServerWithResponse call
func ParseDeleteMcpServerResponse(rsp *http.Response) (*DeleteMcpServerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMcpServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success bool `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error DeleteMcpServer_404_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error DeleteMcpServer_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetMcpServerResponse parses an HTTP response from a GetMcpServerWithResponse call
func ParseGetMcpServerResponse(rsp *http.Response) (*GetMcpServerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMcpServerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CatalogId *openapi_types.UUID    `json:"catalogId"`
			CreatedAt time.Time              `json:"createdAt"`
			Id        openapi_types.UUID     `json:"id"`
			Metadata  map[string]interface{} `json:"metadata"`
			Name      string                 `json:"name"`
			Teams     *[]string              `json:"teams,omitempty"`
			UpdatedAt time.Time              `json:"updatedAt"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error GetMcpServer_401_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error GetMcpServer_404_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error GetMcpServer_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTeamsResponse parses an HTTP response from a GetTeamsWithResponse call
func ParseGetTeamsResponse(rsp *http.Response) (*GetTeamsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			CreatedAt   time.Time `json:"createdAt"`
			CreatedBy   string    `json:"createdBy"`
			Description *string   `json:"description"`
			Id          string    `json:"id"`
			Members     *[]struct {
				CreatedAt time.Time `json:"createdAt"`
				Id        string    `json:"id"`
				Role      string    `json:"role"`
				TeamId    string    `json:"teamId"`
				UserId    string    `json:"userId"`
			} `json:"members,omitempty"`
			Name           string    `json:"name"`
			OrganizationId string    `json:"organizationId"`
			UpdatedAt      time.Time `json:"updatedAt"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error GetTeams_401_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error GetTeams_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateTeamResponse parses an HTTP response from a CreateTeamWithResponse call
func ParseCreateTeamResponse(rsp *http.Response) (*CreateTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedAt   time.Time `json:"createdAt"`
			CreatedBy   string    `json:"createdBy"`
			Description *string   `json:"description"`
			Id          string    `json:"id"`
			Members     *[]struct {
				CreatedAt time.Time `json:"createdAt"`
				Id        string    `json:"id"`
				Role      string    `json:"role"`
				TeamId    string    `json:"teamId"`
				UserId    string    `json:"userId"`
			} `json:"members,omitempty"`
			Name           string    `json:"name"`
			OrganizationId string    `json:"organizationId"`
			UpdatedAt      time.Time `json:"updatedAt"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error CreateTeam_401_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Error CreateTeam_403_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error CreateTeam_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteTeamResponse parses an HTTP response from a DeleteTeamWithResponse call
func ParseDeleteTeamResponse(rsp *http.Response) (*DeleteTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success bool `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error DeleteTeam_401_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Error DeleteTeam_403_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error DeleteTeam_404_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error DeleteTeam_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTeamResponse parses an HTTP response from a GetTeamWithResponse call
func ParseGetTeamResponse(rsp *http.Response) (*GetTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedAt   time.Time `json:"createdAt"`
			CreatedBy   string    `json:"createdBy"`
			Description *string   `json:"description"`
			Id          string    `json:"id"`
			Members     *[]struct {
				CreatedAt time.Time `json:"createdAt"`
				Id        string    `json:"id"`
				Role      string    `json:"role"`
				TeamId    string    `json:"teamId"`
				UserId    string    `json:"userId"`
			} `json:"members,omitempty"`
			Name           string    `json:"name"`
			OrganizationId string    `json:"organizationId"`
			UpdatedAt      time.Time `json:"updatedAt"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error GetTeam_401_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error GetTeam_404_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error GetTeam_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateTeamResponse parses an HTTP response from a UpdateTeamWithResponse call
func ParseUpdateTeamResponse(rsp *http.Response) (*UpdateTeamResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTeamResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedAt   time.Time `json:"createdAt"`
			CreatedBy   string    `json:"createdBy"`
			Description *string   `json:"description"`
			Id          string    `json:"id"`
			Members     *[]struct {
				CreatedAt time.Time `json:"createdAt"`
				Id        string    `json:"id"`
				Role      string    `json:"role"`
				TeamId    string    `json:"teamId"`
				UserId    string    `json:"userId"`
			} `json:"members,omitempty"`
			Name           string    `json:"name"`
			OrganizationId string    `json:"organizationId"`
			UpdatedAt      time.Time `json:"updatedAt"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error UpdateTeam_401_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Error UpdateTeam_403_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error UpdateTeam_404_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error UpdateTeam_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTeamMembersResponse parses an HTTP response from a GetTeamMembersWithResponse call
func ParseGetTeamMembersResponse(rsp *http.Response) (*GetTeamMembersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTeamMembersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			CreatedAt time.Time `json:"createdAt"`
			Id        string    `json:"id"`
			Role      string    `json:"role"`
			TeamId    string    `json:"teamId"`
			UserId    string    `json:"userId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error GetTeamMembers_401_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error GetTeamMembers_404_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error GetTeamMembers_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseAddTeamMemberResponse parses an HTTP response from a AddTeamMemberWithResponse call
func ParseAddTeamMemberResponse(rsp *http.Response) (*AddTeamMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AddTeamMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			CreatedAt time.Time `json:"createdAt"`
			Id        string    `json:"id"`
			Role      string    `json:"role"`
			TeamId    string    `json:"teamId"`
			UserId    string    `json:"userId"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error AddTeamMember_401_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Error AddTeamMember_403_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error AddTeamMember_404_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error AddTeamMember_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseRemoveTeamMemberResponse parses an HTTP response from a RemoveTeamMemberWithResponse call
func ParseRemoveTeamMemberResponse(rsp *http.Response) (*RemoveTeamMemberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &RemoveTeamMemberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success bool `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error RemoveTeamMember_401_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 403:
		var dest struct {
			Error RemoveTeamMember_403_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON403 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error RemoveTeamMember_404_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error RemoveTeamMember_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetToolsResponse parses an HTTP response from a GetToolsWithResponse call
func ParseGetToolsResponse(rsp *http.Response) (*GetToolsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetToolsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Agent *struct {
				Id   string `json:"id"`
				Name string `json:"name"`
			} `json:"agent"`
			CreatedAt   time.Time          `json:"createdAt"`
			Description *string            `json:"description"`
			Id          openapi_types.UUID `json:"id"`
			McpServer   *struct {
				Id   string `json:"id"`
				Name string `json:"name"`
			} `json:"mcpServer"`
			Name       string                   `json:"name"`
			Parameters *GetTools_200_Parameters `json:"parameters,omitempty"`
			UpdatedAt  time.Time                `json:"updatedAt"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error GetTools_401_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error GetTools_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetUnassignedToolsResponse parses an HTTP response from a GetUnassignedToolsWithResponse call
func ParseGetUnassignedToolsResponse(rsp *http.Response) (*GetUnassignedToolsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUnassignedToolsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Agent *struct {
				Id   string `json:"id"`
				Name string `json:"name"`
			} `json:"agent"`
			CreatedAt   time.Time          `json:"createdAt"`
			Description *string            `json:"description"`
			Id          openapi_types.UUID `json:"id"`
			McpServer   *struct {
				Id   string `json:"id"`
				Name string `json:"name"`
			} `json:"mcpServer"`
			Name       string                             `json:"name"`
			Parameters *GetUnassignedTools_200_Parameters `json:"parameters,omitempty"`
			UpdatedAt  time.Time                          `json:"updatedAt"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 401:
		var dest struct {
			Error GetUnassignedTools_401_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON401 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error GetUnassignedTools_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTrustedDataPoliciesResponse parses an HTTP response from a GetTrustedDataPoliciesWithResponse call
func ParseGetTrustedDataPoliciesResponse(rsp *http.Response) (*GetTrustedDataPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTrustedDataPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []struct {
			Action        GetTrustedDataPolicies200Action   `json:"action"`
			AgentToolId   openapi_types.UUID                `json:"agentToolId"`
			AttributePath string                            `json:"attributePath"`
			CreatedAt     time.Time                         `json:"createdAt"`
			Description   string                            `json:"description"`
			Id            openapi_types.UUID                `json:"id"`
			Operator      GetTrustedDataPolicies200Operator `json:"operator"`
			UpdatedAt     time.Time                         `json:"updatedAt"`
			Value         string                            `json:"value"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error GetTrustedDataPolicies_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseCreateTrustedDataPolicyResponse parses an HTTP response from a CreateTrustedDataPolicyWithResponse call
func ParseCreateTrustedDataPolicyResponse(rsp *http.Response) (*CreateTrustedDataPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateTrustedDataPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Action        CreateTrustedDataPolicy200Action   `json:"action"`
			AgentToolId   openapi_types.UUID                 `json:"agentToolId"`
			AttributePath string                             `json:"attributePath"`
			CreatedAt     time.Time                          `json:"createdAt"`
			Description   string                             `json:"description"`
			Id            openapi_types.UUID                 `json:"id"`
			Operator      CreateTrustedDataPolicy200Operator `json:"operator"`
			UpdatedAt     time.Time                          `json:"updatedAt"`
			Value         string                             `json:"value"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error CreateTrustedDataPolicy_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseDeleteTrustedDataPolicyResponse parses an HTTP response from a DeleteTrustedDataPolicyWithResponse call
func ParseDeleteTrustedDataPolicyResponse(rsp *http.Response) (*DeleteTrustedDataPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTrustedDataPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Success bool `json:"success"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error DeleteTrustedDataPolicy_404_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error DeleteTrustedDataPolicy_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetTrustedDataPolicyResponse parses an HTTP response from a GetTrustedDataPolicyWithResponse call
func ParseGetTrustedDataPolicyResponse(rsp *http.Response) (*GetTrustedDataPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTrustedDataPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Action        GetTrustedDataPolicy200Action   `json:"action"`
			AgentToolId   openapi_types.UUID              `json:"agentToolId"`
			AttributePath string                          `json:"attributePath"`
			CreatedAt     time.Time                       `json:"createdAt"`
			Description   string                          `json:"description"`
			Id            openapi_types.UUID              `json:"id"`
			Operator      GetTrustedDataPolicy200Operator `json:"operator"`
			UpdatedAt     time.Time                       `json:"updatedAt"`
			Value         string                          `json:"value"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error GetTrustedDataPolicy_404_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error GetTrustedDataPolicy_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseUpdateTrustedDataPolicyResponse parses an HTTP response from a UpdateTrustedDataPolicyWithResponse call
func ParseUpdateTrustedDataPolicyResponse(rsp *http.Response) (*UpdateTrustedDataPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &UpdateTrustedDataPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Action        UpdateTrustedDataPolicy200Action   `json:"action"`
			AgentToolId   openapi_types.UUID                 `json:"agentToolId"`
			AttributePath string                             `json:"attributePath"`
			CreatedAt     time.Time                          `json:"createdAt"`
			Description   string                             `json:"description"`
			Id            openapi_types.UUID                 `json:"id"`
			Operator      UpdateTrustedDataPolicy200Operator `json:"operator"`
			UpdatedAt     time.Time                          `json:"updatedAt"`
			Value         string                             `json:"value"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 404:
		var dest struct {
			Error UpdateTrustedDataPolicy_404_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON404 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest struct {
			Error UpdateTrustedDataPolicy_500_Error `json:"error"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	}

	return response, nil
}

// ParseGetHealthResponse parses an HTTP response from a GetHealthWithResponse call
func ParseGetHealthResponse(rsp *http.Response) (*GetHealthResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetHealthResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest struct {
			Name    string `json:"name"`
			Status  string `json:"status"`
			Version string `json:"version"`
		}
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}
